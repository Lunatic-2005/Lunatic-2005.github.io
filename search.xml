<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>�ҵĵ�һƪ����</title>
    <url>/2025/04/02/hello-world/</url>
    <content><![CDATA[<p>��ӭ�����ҵĲ��͡�</p>
<p>��������Hexo+Github��ĵ�һ�����͡��ҽ�����������ҵ�ѧϰ�ʼǣ��ճ��п��Ͷ���ʼǵȡ�</p>
]]></content>
  </entry>
  <entry>
    <title>二叉树及其基本操作算法</title>
    <url>/2025/04/04/%E6%A0%91/</url>
    <content><![CDATA[<h3 id="二叉树的特性："><a href="#二叉树的特性：" class="headerlink" title="二叉树的特性："></a>二叉树的特性：</h3><ol>
<li>与一般树的根本区别：二叉树的每一个节点都恰好有两颗子树（其中一个或两个可以为空），而树的每一个元素可以有任意数量的子树。</li>
<li>二叉树中，每个元素的子树是有序的，也就是说，有左子树和右子树之分。</li>
<li>二叉树可以为空的。</li>
<li>一颗有<script type="math/tex">n>0</script>个元素的二叉树有<script type="math/tex">n-1</script>条边，最大高度为<script type="math/tex">n</script>,最小高度为<script type="math/tex; mode=display">
 \left\lceil\log_2(n-1)\right\rceil</script></li>
<li>一颗二叉树高度为h&gt;=0，它至少有h个元素，最多有<script type="math/tex; mode=display">
2^h-1</script>个元素（称为满二叉树）</li>
<li><p>完全二叉树是指对高度为h的满二叉树，从第一层到最后一层，在每层中从左至右顺序编号，删除k个编号为</p>
<script type="math/tex; mode=display">
2^h-i(1≤i≤k<2^h)</script><p>的元素得到的二叉树。然而，我们还有更为容易理解的一种定义：完全二叉树：深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号为1~n的结点一 一对应时，称之为完全二叉树。<br><img src="images/tree/complete_tree.png" alt="二叉树"></p>
</li>
<li><p>完全二叉树的特性：设完全二叉树的一元素其编号为i，1≤i≤n.则有</p>
<ol>
<li>如果i=1，则该元素为二叉树的根；如果i&gt;1,则其父节点的编号为<script type="math/tex">i/2</script></li>
<li>有n个元素的完全二叉树，其高度为<script type="math/tex; mode=display">
\left\lceil\log_2{(n+1)}\right\rceil</script></li>
<li>如果2i&gt;n，则该元素无左孩，否则其左孩编号为2i</li>
<li><p>如果2i+1&gt;n，则该元素无右孩，否则其右孩编号为2i+1.<br>下面证明一下这个性质。<br>当i=1，显然该元素为二叉树的根；当i&gt;1时，考虑对应元素不在最下层，位于树的第</p>
<script type="math/tex; mode=display">
\left\lfloor\log_2{i}\right\rfloor</script><p>级上，其父节点位于</p>
<script type="math/tex; mode=display">
\left\lfloor\log_2{i}\right\rfloor-1</script><p>级上，且</p>
<script type="math/tex; mode=display">
\frac{i-2^{\left\lfloor\log_2{i}\right\rfloor}}{2}=i_{parent}=\left\lfloor\frac{i}{2}\right\rfloor</script><p>若2i&gt;n，即</p>
<script type="math/tex; mode=display">
i>\frac{n}{2}</script><p>设高度为h,只需证：h-1层的最后一个元素的编号</p>
</li>
</ol>
<script type="math/tex; mode=display">
i_{previous} \geq n/2</script><p>考虑最极端的情况，也就是满二叉树（我们当然可以知道满二叉树是一种特殊的二叉树），那么</p>
<script type="math/tex; mode=display">
n=2^h-1</script><p>，而h-1层的最后一个元素的编号为</p>
<script type="math/tex; mode=display">
i_{previous}=2^h{h-1}-1</script><p>（注意这一点是与假设满二叉树无关的）<br>显然满足上述条件。那么对于由满二叉树退化而来（注意这里的表述）的完全二叉树，我们可以知道，如果对应的满二叉树的元素数量为</p>
<script type="math/tex; mode=display">
n_{max}>n</script><p>，则：</p>
<script type="math/tex; mode=display">
i_{previous} \geq \frac{n_{max}}{2}>\frac{n}{2}</script><p>故得证。同理可以完全对称地证明剩余的一个结论。</p>
</li>
</ol>
<h3 id="二叉树的描述："><a href="#二叉树的描述：" class="headerlink" title="二叉树的描述："></a>二叉树的描述：</h3><ol>
<li><p>数组描述。<br>二叉树的数组表示利用了性质7，把二叉树看作是缺少了部分元素的完全二叉树。将二叉树相对于完全二叉树（实际上，相对于满二叉树）缺少的部分也参与编号，对编号后的树建立数组，原有二叉树的元素按照其编号存储在数组的相应位置。一个有n个元素的二叉树最多需要<script type="math/tex">2^n</script><br>个空间来存储（包括了数组的零位置）。所以这是一种很浪费空间的描述方式。值得注意的是，在这种描述种我们用到了类似哈希表的思想，用空间换得了时间。比如，这样存储的二叉树，其查找的时间复杂度为O(1).</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100struct TreeNode&#123;</span></span><br><span class="line">   ElemType value;<span class="comment">//结点中的数据元素</span></span><br><span class="line">   <span class="type">bool</span> isEmpty;<span class="comment">//结点是否为空&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">   TreeNode t[MaxSize];</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">      t[i].isEmpty = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>链表描述。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//binary search tree:left&lt;=right</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bstNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">bstNode* left;</span><br><span class="line">bstNode* right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Creat a node</span></span><br><span class="line"><span class="function">bstNode* <span class="title">getNewNode</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstNode* newNode = <span class="keyword">new</span> <span class="built_in">bstNode</span>();</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;left = newNode-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binaryTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">T element;</span><br><span class="line">binaryTreeNode&lt;T&gt; *lChild,*rChild;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="二叉树的常用操作"><a href="#二叉树的常用操作" class="headerlink" title="二叉树的常用操作"></a>二叉树的常用操作</h3><ol>
<li>二叉树的遍历</li>
<li>求二叉树的高度</li>
<li>复制二叉树</li>
<li>插入节点</li>
<li>删除节点</li>
<li>查找元素</li>
<li>求元素最值（int）</li>
<li>判断是不是二叉搜索树<br>下面是我写的主要操作的算法实现。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Insertion</span></span><br><span class="line"><span class="function">bstNode* <span class="title">Insert</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		root = <span class="built_in">getNewNode</span>(data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		root-&gt;left = <span class="built_in">Insert</span>(root-&gt;left, data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &gt; root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		root-&gt;right = <span class="built_in">Insert</span>(root-&gt;right, data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Search</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Search</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;data == data)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt; root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Search</span>(root-&gt;left, data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &gt; root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Search</span>(root-&gt;right, data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Find Min and Max</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Error:empty tree&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>  <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bstNode* current = root;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (current-&gt;left)</span><br><span class="line">	&#123;</span><br><span class="line">		current = current-&gt;left;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> current-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMax</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Error:empty tree&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	bstNode* current = root;</span><br><span class="line">	<span class="keyword">while</span> (current-&gt;right)</span><br><span class="line">	&#123;</span><br><span class="line">		current = current-&gt;right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> current-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FindMax using recursion</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">recursMax</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bstNode* current = root;</span><br><span class="line">	<span class="keyword">if</span> (current-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> current-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">recursMax</span>(current-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Height of tree </span></span><br><span class="line"><span class="comment">//is the number of edges in longest path </span></span><br><span class="line"><span class="comment">//from root to leaf node</span></span><br><span class="line"><span class="comment">//Get Height(recursion)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Height</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span> + (<span class="built_in">Height</span>(root-&gt;left) &gt;= <span class="built_in">Height</span>(root-&gt;right) ? <span class="built_in">Height</span>(root-&gt;left) : <span class="built_in">Height</span>(root-&gt;right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Traversal</span></span><br><span class="line"><span class="comment">//process of visiting each node in the tree exactly once in some order</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Breadth-first</span></span><br><span class="line"><span class="comment">//Using queue:(LIFO)</span></span><br><span class="line"><span class="comment">//Inserting all the children of current node into a queue </span></span><br><span class="line"><span class="comment">//Visiting the data of the current node</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	queue&lt;bstNode*&gt;Q;</span><br><span class="line">	Q.<span class="built_in">push</span>(root);</span><br><span class="line">	<span class="comment">//while the queue is not empty</span></span><br><span class="line">	<span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		bstNode* current = Q.<span class="built_in">front</span>();</span><br><span class="line">		cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;left)Q.<span class="built_in">push</span>(current-&gt;left);</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;right)Q.<span class="built_in">push</span>(current-&gt;right);</span><br><span class="line">		Q.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Time:O(n)</span></span><br><span class="line"><span class="comment">//Space:Avg-&gt;O(n)</span></span><br><span class="line"><span class="comment">//Depth_first</span></span><br><span class="line"><span class="comment">//1.root-&gt;left-&gt;right(Preorder)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Preorder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; root-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Preorder</span>(root-&gt;left);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Preorder</span>(root-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.left-&gt;root-&gt;right(Inorder)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inorder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>; <span class="comment">// 如果当前节点为空，直接返回</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">Inorder</span>(root-&gt;left);         <span class="comment">// 递归访问左子树</span></span><br><span class="line">	cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">// 访问当前节点</span></span><br><span class="line">	<span class="built_in">Inorder</span>(root-&gt;right);        <span class="comment">// 递归访问右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.left-&gt;right-&gt;root(Postorder) </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Postorder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)<span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">Postorder</span>(root-&gt;left);</span><br><span class="line">	<span class="built_in">Postorder</span>(root-&gt;right);</span><br><span class="line">	cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//using recursion</span></span><br><span class="line"><span class="comment">//bool isSubtreeLesser(bstNode* root,int val)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (root == nullptr)return true;</span></span><br><span class="line"><span class="comment">//	if (root-&gt;data &lt;= val</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeLesser(root-&gt;left, val)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeLesser(root-&gt;right, val))return true;</span></span><br><span class="line"><span class="comment">//	else return false;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool isSubtreeGreater(bstNode* root, int val)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (root == nullptr)return true;</span></span><br><span class="line"><span class="comment">//	if (root-&gt;data &gt; val</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeGreater(root-&gt;left, val)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeGreater(root-&gt;right, val))return true;</span></span><br><span class="line"><span class="comment">//	else return false;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool isBst(bstNode *root)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (root == nullptr)return true;</span></span><br><span class="line"><span class="comment">//	if (isSubtreeLesser(root-&gt;left, root-&gt;data)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeGreater(root-&gt;right, root-&gt;data)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isBst(root-&gt;left)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isBst(root-&gt;right)</span></span><br><span class="line"><span class="comment">//		)return true;</span></span><br><span class="line"><span class="comment">//	else return false;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//better edition</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isBst</span><span class="params">(bstNode* root, <span class="type">int</span> minVal= INT_MIN, <span class="type">int</span> maxVal=INT_MAX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!root)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">isBst</span>(root-&gt;left, minVal, root-&gt;data)</span><br><span class="line">		&amp;&amp; <span class="built_in">isBst</span>(root-&gt;right, root-&gt;data, maxVal)</span><br><span class="line">		&amp;&amp; root-&gt;data&lt;maxVal &amp;&amp; root-&gt;data&gt;minVal)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Delete a node from bst</span></span><br><span class="line"><span class="function">bstNode* <span class="title">Delete</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!root)<span class="keyword">return</span> root;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt; root-&gt;data)root-&gt;left = <span class="built_in">Delete</span>(root-&gt;left, data);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &gt; root-&gt;data)root-&gt;right = <span class="built_in">Delete</span>(root-&gt;right, data);</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//found</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//no child</span></span><br><span class="line">		<span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> root;</span><br><span class="line">			root = <span class="literal">nullptr</span>;</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//one child</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			bstNode* tmp = root;</span><br><span class="line">			root = root-&gt;right;</span><br><span class="line">			<span class="keyword">delete</span> tmp;</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			bstNode* tmp = root;</span><br><span class="line">			root = root-&gt;left;</span><br><span class="line">			<span class="keyword">delete</span> tmp;</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//two children</span></span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			bstNode* tmp = <span class="built_in">FindMin</span>(root-&gt;right);</span><br><span class="line">			root-&gt;data = tmp-&gt;data;</span><br><span class="line">			root-&gt;right = <span class="built_in">Delete</span>(root-&gt;right, tmp-&gt;data);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bstNode* <span class="title">FindMin</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Error:empty tree&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	bstNode* current = root;</span><br><span class="line">	<span class="keyword">while</span> (current-&gt;right)</span><br><span class="line">	&#123;</span><br><span class="line">		current = current-&gt;right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在进行二叉树遍历的时候，有这样四种遍历方式：</p>
<ol>
<li>前序遍历（PreOrder）:root-&gt;left-&gt;right</li>
<li>中序遍历（InOrder）:left-&gt;root-&gt;right</li>
<li>后序遍历（PostOrder）:left-&gt;right-&gt;root</li>
<li>层次遍历（LevelOrder）</li>
</ol>
<p>对于前三种，他们的递归形式很好理解，以前序遍历为例，其算法可以表述为：</p>
<ol>
<li>访问当前节点。</li>
<li>如果左孩不为空，前序遍历左子树。</li>
<li>如果右孩不为空，前序遍历右子树。</li>
</ol>
<p>我们来看看如何把它写成迭代的形式。</p>
<p>这里以前序遍历为例。迭代形式的算法可以表述为：</p>
<ol>
<li>建立一个栈空间Q</li>
<li>当我们遍历到当前节点current时，读取这个节点的数据</li>
<li>如果当前节点的左孩不为空，就把当前节点压入Q，将当前节点移到左孩处</li>
<li>如果当前节点的左孩为空，将Q的栈顶弹出，当前节点回到其父节点。<br>a. 此时，如果当前节点有右孩，就把当前节点移到右孩，重复2~4.<br>b. 如果此时当前节点没有右孩，则重复4.</li>
</ol>
<p>基于这种迭代方法，我们可以<strong>显示地</strong>将递归形式中通过函数调用的栈空间用Q栈表示出来了。以下为具体的实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> &#123;&#125;;  <span class="comment">// 如果根节点为空，直接返回空结果</span></span><br><span class="line">        stack&lt;TreeNode*&gt; S;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        TreeNode* rt = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rt || !S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (rt) &#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(rt-&gt;val);  <span class="comment">// 访问当前节点</span></span><br><span class="line">                S.<span class="built_in">push</span>(rt);            <span class="comment">// 将当前节点压入栈</span></span><br><span class="line">                rt = rt-&gt;left;         <span class="comment">// 转向左子树</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                rt = S.<span class="built_in">top</span>();  <span class="comment">// 弹出栈顶节点</span></span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">                rt = rt-&gt;right;  <span class="comment">// 转向右子树</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>值得注意的是，此时虽然我们用了递归方法，但这种方法的时间复杂度并不一定低于迭代方法。</p>
<p>二叉树的层序遍历则是使用了队列的数据结构，其算法过程描述如下：</p>
<ol>
<li>建立一个队列Q。</li>
<li>将根节点入Q列。</li>
<li>如果Q列不为空，则从队头弹出一个节点，读取其数据并将其孩子节点（如果存在）入列。</li>
<li>重复3，直到Q列空，返回。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">queue&lt;bstNode*&gt;Q;</span><br><span class="line">Q.<span class="built_in">push</span>(root);</span><br><span class="line"><span class="comment">//while the queue is not empty</span></span><br><span class="line"><span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">bstNode* current = Q.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;left)Q.<span class="built_in">push</span>(current-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (current-&gt;right)Q.<span class="built_in">push</span>(current-&gt;right);</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图论模型：最小路径算法</title>
    <url>/2025/04/02/%E5%9B%BE%E8%AE%BA%E6%A8%A1%E5%9E%8B%EF%BC%9A%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h2><p>图，有向图，无向图的定义这里从略。</p>
<p>定义1 无环，无重边的图称为简单图。</p>
<p>定义2 任意两顶点均相邻的简单图称为完全图。含有n个顶点的完全图记为<script type="math/tex">K_n</script></p>
<p>定义3 顶点的度：</p>
<p>（1）在无向图中，与顶点v关联的边的数目（环算两次）称为这个点的度，记为<script type="math/tex">d（v）</script></p>
<p>（2）在有向图中，从顶点v引出的弧的数目称为v的v的出度，记为<script type="math/tex">d^+(v)</script>,从该点引入的弧的数目称为入度，记为<script type="math/tex">d^-(v)</script>,两者相加之和记为顶点的度。</p>
<p>定理1 对任意图，有</p>
<script type="math/tex; mode=display">
\sum d(v)=2 \cdot \left|E\right|</script><p>推论：任何图中的奇顶点总数为偶数.</p>
<h2 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h2><p><strong>1.关联矩阵</strong><br>对于无向图 <script type="math/tex">{G}</script>，其关联矩阵 <script type="math/tex">{M=(m_{ij}){n\times m}}</script>，其中</p>
<script type="math/tex; mode=display">m{ij} = \begin{cases}
1, & \text{if } v_i \text{ is related to } e_j \\
0, & \text{if } v_i \text{ is not related to } e_j
\end{cases}</script><p>对于无向图<script type="math/tex">{G}</script>其关联矩阵 <script type="math/tex">{M=(m_{ij}){n\times m}}</script>，其中</p>
<script type="math/tex; mode=display">m_{ij} = \begin{cases}
1, & \text{当 } v_i \text{ 是起始点 }  \\
0, & \text{当 } v_i \text{ 与 } e_j \text{ 无关} \\
-1, & \text{当 } v_i \text{ 是末端点 }  \\
\end{cases}</script><p><strong>2.邻接矩阵</strong></p>
<p>对于无向赋权图 <script type="math/tex">{G}</script>，其邻接矩阵 <script type="math/tex">{W=(m_{ij}){n\times m}}</script>，其中</p>
<script type="math/tex; mode=display">w_{ij} =
\begin{cases}
\text{weight between } v_i \text{ and } v_j, & \text{顶点 } v_i \text{ 和 } v_j \text{ 相邻} \\
0, & \text{顶点 } v_i \text{ 和 } v_j \text{ 不相邻}
\end{cases}</script><p>对于有向赋权图，上式改为：</p>
<script type="math/tex; mode=display">w_{ij} =
\begin{cases}
\text{weight between } v_i \text{ and } v_j, & (v_i,v_j) \in A \\
0, & \text{顶点 } v_i \text{ 指向 } v_j \text{ 的弧不存在或}i=j
\end{cases}</script><h2 id="最短路算法"><a href="#最短路算法" class="headerlink" title="最短路算法"></a>最短路算法</h2><p><strong>1.Dijkstra算法（贪心算法）</strong><br>这是一种贪心算法，其主要用到的是迭代方法。它的依据是一个重要且明显的性质：<strong>最短路是一条路，它的任意子路也是该子路两端点间的最短路</strong>。<br>该算法的核心思想是：<strong>从起点由近及远地求得到各点的最短路和距离，直到到达某个顶点</strong>。<br>为了避免重复并保留每一步的计算信息，对于任意顶点<script type="math/tex">v_i</script>定义两个记号：</p>
<script type="math/tex; mode=display">l(v):\text{顶点v的标号，表示起点到v点的当前路径长度} \\
z(v):\text{顶点v的父顶点标号，用于确定最短路线（类似于链表链域的作用）} \\
S_i: \text{表示具有永久标号的顶点集}</script><p>算法的操作可以这样表示：</p>
<p>令起点<script type="math/tex">u_0</script>：</p>
<script type="math/tex; mode=display">l(u_0)=0,对v \neq u_0,\text{令}l(v)=∞,z(v)=u_0,S_0=\{u_0\},i=0.</script><script type="math/tex; mode=display">对每个v \in \overline {S_i} (\overline{S_i}=V/S_i),\text{令}l(v)=min{l(v),l(v_{previous})+w(v_{previous}v)}</script><p>其中，<script type="math/tex">w_{uv}</script>表示顶点u和v之间边的权值.如果利用上一个节点对当前节点的<script type="math/tex">l(v)</script>进行了修改，则<script type="math/tex">z(v)=v_{previous}</script><br>,否则<script type="math/tex">z(v)</script>不变.<br>计算<script type="math/tex">min\{l(v)\}</script>,把达到这个最小值的一个顶点即为<script type="math/tex">u_{i+1}</script>,令<script type="math/tex">S_{i+1}=S_i</script><br>算法用伪代码表示如下：<br>Q = G.V  // Q 是一个优先队列，按 <script type="math/tex">l(v)</script>排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 主循环</span><br><span class="line">DIJKSTRA(G, w, s)</span><br><span class="line">// 初始化</span><br><span class="line">for each vertex v in G.V:</span><br><span class="line">l(v) = ∞</span><br><span class="line">z(v) = NIL</span><br><span class="line">l(s) = 0</span><br><span class="line">S_i =</span><br><span class="line">while Q is not empty:</span><br><span class="line">    u = EXTRACT-MIN(Q)  // 从 Q 中取出 l(v) 最小的顶点 u</span><br><span class="line">    S_i = S_i ∪ &#123;u&#125;    // 将 u 加入永久标号集合 S_i</span><br><span class="line">    for each vertex v in G.Adj[u]:  // 遍历 u 的所有邻接顶点 v</span><br><span class="line">        if l(v) &gt; l(u) + w(u, v):  // 松弛操作</span><br><span class="line">            l(v) = l(u) + w(u, v)</span><br><span class="line">            z(v) = u</span><br><span class="line">            DECREASE-KEY(Q, v, l(v))  // 更新 Q 中 v 的优先级</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面是用python实现的算法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">graph, start</span>):</span><br><span class="line">    <span class="comment"># 初始化距离字典和父顶点字典</span></span><br><span class="line">    l = &#123;vertex: <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">for</span> vertex <span class="keyword">in</span> graph&#125;</span><br><span class="line">    z = &#123;vertex: <span class="literal">None</span> <span class="keyword">for</span> vertex <span class="keyword">in</span> graph&#125;</span><br><span class="line">    l[start] = <span class="number">0</span>  <span class="comment"># 起点的距离为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用优先队列存储 (距离, 顶点) 对</span></span><br><span class="line">    priority_queue = [(<span class="number">0</span>, start)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> priority_queue:</span><br><span class="line">        current_distance, u = heapq.heappop(priority_queue)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果当前距离大于已知最短距离，则跳过</span></span><br><span class="line">        <span class="keyword">if</span> current_distance &gt; l[u]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历邻接顶点</span></span><br><span class="line">        <span class="keyword">for</span> v, weight <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            distance = current_distance + weight</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果发现更短路径，则更新</span></span><br><span class="line">            <span class="keyword">if</span> distance &lt; l[v]:</span><br><span class="line">                l[v] = distance</span><br><span class="line">                z[v] = u</span><br><span class="line">                heapq.heappush(priority_queue, (distance, v))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l, z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例图的邻接表表示</span></span><br><span class="line">graph = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: &#123;<span class="string">&#x27;B&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">4</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: &#123;<span class="string">&#x27;B&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l, z = dijkstra(graph, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最短距离:&quot;</span>, l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;父顶点记录:&quot;</span>, z)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>2.Floid算法：（动态规划）</strong></p>
<p>如果一个节点位于起点到重点的最短距离路径上，以节点0→8为例，</p>
<ol>
<li><script type="math/tex; mode=display">l（0→8）=l(0 \to 4)+l(4\to 8)(\text{if 4} \in \text{the shortest way }) \\
l（0→8）<l(0 \to 6)+l(6\to 8)(\text{if 6} \notin \text{the shortest way })</script></li>
<li>Python代码（片段）：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.V):</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.V):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.V):</span><br><span class="line">			<span class="keyword">if</span> <span class="variable language_">self</span>.D[i][k]+<span class="variable language_">self</span>[k][j]&lt;<span class="variable language_">self</span>.D[i][j]:</span><br><span class="line">				<span class="variable language_">self</span>.D[i][j]=<span class="variable language_">self</span>.D[i][k]+<span class="variable language_">self</span>[k][j]</span><br><span class="line">				<span class="variable language_">self</span>.S[i][j]=<span class="variable language_">self</span>.S[i][k]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
</search>
