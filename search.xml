<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STM32 位带操作</title>
    <url>/2025/04/05/STM32-%E4%BD%8D%E5%B8%A6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="什么是位带操作和位带区"><a href="#什么是位带操作和位带区" class="headerlink" title="什么是位带操作和位带区"></a>什么是位带操作和位带区</h2><h3 id="位带操作"><a href="#位带操作" class="headerlink" title="位带操作"></a>位带操作</h3><p>STM32内核的最小寻址单位是字节，一个字节里面有8位，所谓位带操作就是在STM32中实现位操作的方法。，我们先来看什么是<strong>位带区</strong>。</p>
<p>下面一张图片是Cortex-M内核寻址空间映射图。</p>
<p><img data-src="images/STM32/stm32_find_addr.png" alt="寻址映射图"></p>
<p>图中的SRAM区里的0X20000000-0X200FFFF地址段和片内外设区里的0X40000000-0X400FFFFF地址段就是位带区，也就是设计支持位带操作的内存区域。在野火相关资料文档中，有这样一段解释：</p>
<blockquote>
<p>那么，STM32是如何将内核寻址单位缩小到位的呢？位带区这两个1MB的空间除了可以像正常的RAM一样操作外， 他们还有自己的位带别名区，位带别名区把这1MB的空间的每一个位膨胀成一个32位的字，当访问位带别名区的这些字时，就可以达到访问位带区某个比特位的目的。</p>
</blockquote>
<p>由此可以看出，想要对STM32实现位操作，只有随位带别名区的一个字空间（注意，不是字节空间）进行操作，而之所以不用字节则是因为这样会降低访问速度。</p>
<h2 id="如何进行位带操作"><a href="#如何进行位带操作" class="headerlink" title="如何进行位带操作"></a>如何进行位带操作</h2><p>我们可以通过指针的形式访问位带别名区地址从而达到操作位带区比特位的效果。</p>
<h3 id="外设位带别名区地址"><a href="#外设位带别名区地址" class="headerlink" title="外设位带别名区地址"></a>外设位带别名区地址</h3><p>对于片上外设位带区的某一位空间，设其所在的<strong>字节</strong>地址为A，位序号为n（0&lt;=n&lt;=31），则该位<strong>对应的位带别名区地址</strong>为</p>
<script type="math/tex; mode=display">
AliasAddr= 0x42000000+ (A-0x40000000)\times8\times4 +4n</script><p>0X42000000是外设位带别名区的起始地址，0x40000000是外设位带区的起始地址，（A-0x40000000）表示该比特前面有多少个字节， 一个字节有8位，所以*8，一个位膨胀后是4个字节，所以*4，n表示该比特在A地址的序号，因为一个位经过膨胀后是四个字节，所以也*4。</p>
<h3 id="SRAM位带别名区地址"><a href="#SRAM位带别名区地址" class="headerlink" title="SRAM位带别名区地址"></a>SRAM位带别名区地址</h3><p>同样可以知道，</p>
<script type="math/tex; mode=display">
AliasAddr= 0x22000000+ (A-0x20000000)\times8\times4 +4n</script><h3 id="宏定义位带别名区地址的转换"><a href="#宏定义位带别名区地址的转换" class="headerlink" title="宏定义位带别名区地址的转换"></a>宏定义位带别名区地址的转换</h3><p><code>#define BITBAND(addr,bitnum)((addr &amp; 0xF0000000)+0x02000000+((addr &amp;0x00FFFFF&lt;&lt;5)+(bitnum&lt;&lt;2))</code></p>
<p>好好理解一下这个公式！特别是其中按位与运算之巧妙！以下是野火开源资料对上述公示的描述。</p>
<blockquote>
<p>addr &amp; 0xF0000000是为了区别SRAM还是外设，实际效果就是取出4或者2，如果是外设，则取出的是4，+0X02000000之后就等于0X42000000， 0X42000000是外设别名区的起始地址。如果是SRAM，则取出的是2，+0X02000000之后就等于0X22000000，0X22000000是SRAM别名区的起始地址。</p>
<p>addr &amp; 0x00FFFFFF 屏蔽了高三位，相当于减去0X20000000或者0X40000000，但是为什么是屏蔽高三位？因为外设的最高地址是：0X20100000， 跟起始地址0X20000000相减的时候，总是低5位才有效，所以干脆就把高三位屏蔽掉来达到减去起始地址的效果，具体屏蔽掉多少位跟最高地址有关。 SRAM同理分析即可。&lt;&lt;5相当于*8*4，&lt;&lt;2相当于*4，这两个我们在上面分析过。</p>
</blockquote>
<p>下面介绍常用的宏定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define BITBAND(addr,bitnum)((addr &amp; 0xF0000000)+0x02000000+((addr &amp;0x00FFFFF&lt;&lt;5)+(bitnum&lt;&lt;2))</span><br><span class="line">#define MEM_ADDR(addr)            *((volatile unsigned long *)addr)</span><br><span class="line">#define BIT_ADDR(addr,bitnum)     MEM_ADDR(BITAND)(addr,bitnum)</span><br></pre></td></tr></table></figure>
<p>上述宏定义中，BITAND用来将位带区某一位空间所在字节的首位地址和位偏移量映射为其在位带别名区的地址；MEM_ADDR用于将位带区某一位空间所在字节的首位地址转化为指针；</p>
<p>BIT_ADDR用于将位带区某一位空间所在字节的首位地址和位偏移量映射为对应的指针。（值得注意的是volatile关键字，需要提醒编译器每次存储或读取addr地址时重新从变量地址读取数据，避免优化）；由于地址是32位的，所以用无符号长整形表达地址。</p>
<h3 id="GPIO的位带操作"><a href="#GPIO的位带操作" class="headerlink" title="GPIO的位带操作"></a>GPIO的位带操作</h3><p>我们来举一个例子：</p>
<p>如果我们要控制一个LED闪烁，利用库函数，我们需要经历一下算法：</p>
<ol>
<li>初始化GPIO引脚（低电平有效为例）</li>
<li>控制GPIO为低电平，延时一段时间</li>
<li>控制GPIO为高电平，延时一段时间</li>
<li>回到2</li>
</ol>
<p>然而利用位带操作，我们可以对单个管脚进行操作。当我们要操作一个位，直接用GPIO封装的宏直接访问这一位的数据。这样可以直接利用对应寄存器进行输出！上述算法变为：</p>
<ol>
<li>通过相应GPIO的寄存器地址的位带别名区地址，访问寄存器变量。可以利用宏定义：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// GPIO ODR 和 IDR 寄存器地址映射 </span><br><span class="line">#define GPIOA_ODR_Addr    (GPIOA_BASE+20) </span><br><span class="line">#define GPIOB_ODR_Addr    (GPIOB_BASE+20)   </span><br><span class="line">#define GPIOC_ODR_Addr    (GPIOC_BASE+20)  </span><br><span class="line">#define GPIOD_ODR_Addr    (GPIOD_BASE+20) </span><br><span class="line">#define GPIOE_ODR_Addr    (GPIOE_BASE+20) </span><br><span class="line">#define GPIOF_ODR_Addr    (GPIOF_BASE+20)  </span><br><span class="line">#define GPIOG_ODR_Addr    (GPIOG_BASE+20)</span><br><span class="line">#define GPIOH_ODR_Addr    (GPIOH_BASE+20)  </span><br><span class="line">#define GPIOI_ODR_Addr    (GPIOI_BASE+20)</span><br><span class="line">#define GPIOJ_ODR_Addr    (GPIOJ_BASE+20)  </span><br><span class="line">#define GPIOK_ODR_Addr    (GPIOK_BASE+20)</span><br><span class="line"></span><br><span class="line">#define GPIOA_IDR_Addr    (GPIOA_BASE+16)  </span><br><span class="line">#define GPIOB_IDR_Addr    (GPIOB_BASE+16)  </span><br><span class="line">#define GPIOC_IDR_Addr    (GPIOC_BASE+16)   </span><br><span class="line">#define GPIOD_IDR_Addr    (GPIOD_BASE+16)  </span><br><span class="line">#define GPIOE_IDR_Addr    (GPIOE_BASE+16)  </span><br><span class="line">#define GPIOF_IDR_Addr    (GPIOF_BASE+16)  </span><br><span class="line">#define GPIOG_IDR_Addr    (GPIOG_BASE+16)  </span><br><span class="line">#define GPIOH_IDR_Addr    (GPIOH_BASE+16)</span><br><span class="line">#define GPIOI_IDR_Addr    (GPIOI_BASE+16)</span><br><span class="line">#define GPIOJ_IDR_Addr    (GPIOJ_BASE+16)</span><br><span class="line">#define GPIOK_IDR_Addr    (GPIOK_BASE+16)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 单独操作 GPIO的某一个IO口，n(0,1,2...16),n表示具体是哪一个IO口</span><br><span class="line">#define PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)  //输出   </span><br><span class="line">#define PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)  //输入   </span><br><span class="line"></span><br><span class="line">#define PBout(n)   BIT_ADDR(GPIOB_ODR_Addr,n)  //输出   </span><br><span class="line">#define PBin(n)    BIT_ADDR(GPIOB_IDR_Addr,n)  //输入   </span><br><span class="line"></span><br><span class="line">#define PCout(n)   BIT_ADDR(GPIOC_ODR_Addr,n)  //输出   </span><br><span class="line">#define PCin(n)    BIT_ADDR(GPIOC_IDR_Addr,n)  //输入   </span><br><span class="line"></span><br><span class="line">#define PDout(n)   BIT_ADDR(GPIOD_ODR_Addr,n)  //输出   </span><br><span class="line">#define PDin(n)    BIT_ADDR(GPIOD_IDR_Addr,n)  //输入   </span><br><span class="line"></span><br><span class="line">#define PEout(n)   BIT_ADDR(GPIOE_ODR_Addr,n)  //输出   </span><br><span class="line">#define PEin(n)    BIT_ADDR(GPIOE_IDR_Addr,n)  //输入  </span><br><span class="line"></span><br><span class="line">#define PFout(n)   BIT_ADDR(GPIOF_ODR_Addr,n)  //输出   </span><br><span class="line">#define PFin(n)    BIT_ADDR(GPIOF_IDR_Addr,n)  //输入  </span><br><span class="line"></span><br><span class="line">#define PGout(n)   BIT_ADDR(GPIOG_ODR_Addr,n)  //输出   </span><br><span class="line">#define PGin(n)    BIT_ADDR(GPIOG_IDR_Addr,n)  //输入  </span><br><span class="line"></span><br><span class="line">#define PHout(n)   BIT_ADDR(GPIOH_ODR_Addr,n)  //输出   </span><br><span class="line">#define PHin(n)    BIT_ADDR(GPIOH_IDR_Addr,n)  //输入  </span><br><span class="line"></span><br><span class="line">#define PIout(n)   BIT_ADDR(GPIOI_ODR_Addr,n)  //输出   </span><br><span class="line">#define PIin(n)    BIT_ADDR(GPIOI_IDR_Addr,n)  //输入 </span><br><span class="line"></span><br><span class="line">#define PJout(n)   BIT_ADDR(GPIOJ_ODR_Addr,n)  //输出   </span><br><span class="line">#define PJin(n)    BIT_ADDR(GPIOJ_IDR_Addr,n)  //输入  </span><br><span class="line"></span><br><span class="line">#define PKout(n)   BIT_ADDR(GPIOK_ODR_Addr,n)  //输出   </span><br><span class="line">#define PKin(n)    BIT_ADDR(GPIOK_IDR_Addr,n)  //输入  </span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>进行操作。（库函数中已经写好啦，现场查即可）</p>
<ol>
<li>LED=0，延时；LED=1，延时；</li>
<li>回到2；</li>
</ol>
<p>注意：</p>
<ol>
<li>STM32F7以上的MCU不支持位带操作。</li>
<li>out管脚作为左值使用，in管脚作为右值使用。</li>
</ol>
<p>下面来写一下上述GPIO位带操作的实现举例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//.c文件核心代码</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //LED_Init</span><br><span class="line">    LED_GPIO_Init();</span><br><span class="line">    while(1)&#123;</span><br><span class="line">      PFout(6)=0;</span><br><span class="line">      SOFT_Delay(0x0FFFFF);</span><br><span class="line">      PFout(6)=1;</span><br><span class="line">      SOFT_Delay(0x0FFFFF);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*基于一般库函数的版本：</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    RCC_HSE_Config(RCC_PLLSource_HSE_Div2,RCC_PLLMul_9);</span><br><span class="line">    LED_Init();</span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        GPIO_ResetBits(LED0_PORT,LED0_PIN);</span><br><span class="line">        SOFT_Delay(0x0FFFFF);</span><br><span class="line">        GPIO_ResetBits(LED0_PORT,LED0_PIN);</span><br><span class="line">        SOFT_Delay(0x0FFFFF);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>stm32</tag>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到Lunatic&#39;s Space</title>
    <url>/2025/03/30/hello-world/</url>
    <content><![CDATA[<p>欢迎来到我的博客。</p>
<p>这是我用Hexo+Github搭建的第一个博客。我将在这里分享我的学习笔记，日常感慨和读书笔记等。</p>
<p>本站关键词:<br>技术    理论    生活     </p>
]]></content>
  </entry>
  <entry>
    <title>二叉搜索树</title>
    <url>/2025/04/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>图论模型：最小路径算法</title>
    <url>/2025/04/02/%E5%9B%BE%E8%AE%BA%E6%A8%A1%E5%9E%8B%EF%BC%9A%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h2><p>图，有向图，无向图的定义这里从略。</p>
<p>定义1 无环，无重边的图称为简单图。</p>
<p>定义2 任意两顶点均相邻的简单图称为完全图。含有n个顶点的完全图记为<script type="math/tex">K_n</script></p>
<p>定义3 顶点的度：</p>
<p>（1）在无向图中，与顶点v关联的边的数目（环算两次）称为这个点的度，记为<script type="math/tex">d（v）</script></p>
<p>（2）在有向图中，从顶点v引出的弧的数目称为v的v的出度，记为<script type="math/tex">d^+(v)</script>,从该点引入的弧的数目称为入度，记为<script type="math/tex">d^-(v)</script>,两者相加之和记为顶点的度。</p>
<p>定理1 对任意图，有</p>
<script type="math/tex; mode=display">
\sum d(v)=2 \cdot \left|E\right|</script><p>推论：任何图中的奇顶点总数为偶数.</p>
<h2 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h2><p><strong>1.关联矩阵</strong><br>对于无向图 <script type="math/tex">{G}</script>，其关联矩阵 <script type="math/tex">{M=(m_{ij}){n\times m}}</script>，其中</p>
<script type="math/tex; mode=display">m{ij} = \begin{cases}
1, & \text{if } v_i \text{ is related to } e_j \\
0, & \text{if } v_i \text{ is not related to } e_j
\end{cases}</script><p>对于无向图<script type="math/tex">{G}</script>其关联矩阵 <script type="math/tex">{M=(m_{ij}){n\times m}}</script>，其中</p>
<script type="math/tex; mode=display">m_{ij} = \begin{cases}
1, & \text{当 } v_i \text{ 是起始点 }  \\
0, & \text{当 } v_i \text{ 与 } e_j \text{ 无关} \\
-1, & \text{当 } v_i \text{ 是末端点 }  \\
\end{cases}</script><p><strong>2.邻接矩阵</strong></p>
<p>对于无向赋权图 <script type="math/tex">{G}</script>，其邻接矩阵 <script type="math/tex">{W=(m_{ij}){n\times m}}</script>，其中</p>
<script type="math/tex; mode=display">w_{ij} =
\begin{cases}
\text{weight between } v_i \text{ and } v_j, & \text{顶点 } v_i \text{ 和 } v_j \text{ 相邻} \\
0, & \text{顶点 } v_i \text{ 和 } v_j \text{ 不相邻}
\end{cases}</script><p>对于有向赋权图，上式改为：</p>
<script type="math/tex; mode=display">w_{ij} =
\begin{cases}
\text{weight between } v_i \text{ and } v_j, & (v_i,v_j) \in A \\
0, & \text{顶点 } v_i \text{ 指向 } v_j \text{ 的弧不存在或}i=j
\end{cases}</script><h2 id="最短路算法"><a href="#最短路算法" class="headerlink" title="最短路算法"></a>最短路算法</h2><p><strong>1.Dijkstra算法（贪心算法）</strong><br>这是一种贪心算法，其主要用到的是迭代方法。它的依据是一个重要且明显的性质：<strong>最短路是一条路，它的任意子路也是该子路两端点间的最短路</strong>。<br>该算法的核心思想是：<strong>从起点由近及远地求得到各点的最短路和距离，直到到达某个顶点</strong>。<br>为了避免重复并保留每一步的计算信息，对于任意顶点<script type="math/tex">v_i</script>定义两个记号：</p>
<script type="math/tex; mode=display">l(v):\text{顶点v的标号，表示起点到v点的当前路径长度} \\
z(v):\text{顶点v的父顶点标号，用于确定最短路线（类似于链表链域的作用）} \\
S_i: \text{表示具有永久标号的顶点集}</script><p>算法的操作可以这样表示：</p>
<p>令起点<script type="math/tex">u_0</script>：</p>
<script type="math/tex; mode=display">l(u_0)=0,对v \neq u_0,\text{令}l(v)=∞,z(v)=u_0,S_0=\{u_0\},i=0.</script><script type="math/tex; mode=display">对每个v \in \overline {S_i} (\overline{S_i}=V/S_i),\text{令}l(v)=min{l(v),l(v_{previous})+w(v_{previous}v)}</script><p>其中，<script type="math/tex">w_{uv}</script>表示顶点u和v之间边的权值.如果利用上一个节点对当前节点的<script type="math/tex">l(v)</script>进行了修改，则<script type="math/tex">z(v)=v_{previous}</script><br>,否则<script type="math/tex">z(v)</script>不变.<br>计算<script type="math/tex">min\{l(v)\}</script>,把达到这个最小值的一个顶点即为<script type="math/tex">u_{i+1}</script>,令<script type="math/tex">S_{i+1}=S_i</script><br>算法用伪代码表示如下：<br>Q = G.V  // Q 是一个优先队列，按 <script type="math/tex">l(v)</script>排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 主循环</span><br><span class="line">DIJKSTRA(G, w, s)</span><br><span class="line">// 初始化</span><br><span class="line">for each vertex v in G.V:</span><br><span class="line">l(v) = ∞</span><br><span class="line">z(v) = NIL</span><br><span class="line">l(s) = 0</span><br><span class="line">S_i =</span><br><span class="line">while Q is not empty:</span><br><span class="line">    u = EXTRACT-MIN(Q)  // 从 Q 中取出 l(v) 最小的顶点 u</span><br><span class="line">    S_i = S_i ∪ &#123;u&#125;    // 将 u 加入永久标号集合 S_i</span><br><span class="line">    for each vertex v in G.Adj[u]:  // 遍历 u 的所有邻接顶点 v</span><br><span class="line">        if l(v) &gt; l(u) + w(u, v):  // 松弛操作</span><br><span class="line">            l(v) = l(u) + w(u, v)</span><br><span class="line">            z(v) = u</span><br><span class="line">            DECREASE-KEY(Q, v, l(v))  // 更新 Q 中 v 的优先级</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面是用python实现的算法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">graph, start</span>):</span><br><span class="line">    <span class="comment"># 初始化距离字典和父顶点字典</span></span><br><span class="line">    l = &#123;vertex: <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">for</span> vertex <span class="keyword">in</span> graph&#125;</span><br><span class="line">    z = &#123;vertex: <span class="literal">None</span> <span class="keyword">for</span> vertex <span class="keyword">in</span> graph&#125;</span><br><span class="line">    l[start] = <span class="number">0</span>  <span class="comment"># 起点的距离为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用优先队列存储 (距离, 顶点) 对</span></span><br><span class="line">    priority_queue = [(<span class="number">0</span>, start)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> priority_queue:</span><br><span class="line">        current_distance, u = heapq.heappop(priority_queue)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果当前距离大于已知最短距离，则跳过</span></span><br><span class="line">        <span class="keyword">if</span> current_distance &gt; l[u]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历邻接顶点</span></span><br><span class="line">        <span class="keyword">for</span> v, weight <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            distance = current_distance + weight</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果发现更短路径，则更新</span></span><br><span class="line">            <span class="keyword">if</span> distance &lt; l[v]:</span><br><span class="line">                l[v] = distance</span><br><span class="line">                z[v] = u</span><br><span class="line">                heapq.heappush(priority_queue, (distance, v))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l, z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例图的邻接表表示</span></span><br><span class="line">graph = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: &#123;<span class="string">&#x27;B&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">4</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">5</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: &#123;<span class="string">&#x27;B&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l, z = dijkstra(graph, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最短距离:&quot;</span>, l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;父顶点记录:&quot;</span>, z)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>2.Floid算法：（动态规划）</strong></p>
<p>如果一个节点位于起点到重点的最短距离路径上，以节点0→8为例，</p>
<ol>
<li><script type="math/tex; mode=display">l（0→8）=l(0 \to 4)+l(4\to 8)(\text{if 4} \in \text{the shortest way }) \\
l（0→8）<l(0 \to 6)+l(6\to 8)(\text{if 6} \notin \text{the shortest way })</script></li>
<li>Python代码（片段）：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.V):</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.V):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.V):</span><br><span class="line">			<span class="keyword">if</span> <span class="variable language_">self</span>.D[i][k]+<span class="variable language_">self</span>[k][j]&lt;<span class="variable language_">self</span>.D[i][j]:</span><br><span class="line">				<span class="variable language_">self</span>.D[i][j]=<span class="variable language_">self</span>.D[i][k]+<span class="variable language_">self</span>[k][j]</span><br><span class="line">				<span class="variable language_">self</span>.S[i][j]=<span class="variable language_">self</span>.S[i][k]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2025/03/31/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="算法（2）排序算法"><a href="#算法（2）排序算法" class="headerlink" title="算法（2）排序算法"></a>算法（2）排序算法</h1><p>1、插入排序</p>
<p>1.1 直接插入排序：</p>
<p>直接插入排序的基本思想：</p>
<p>1）将整个数组分为“已排序”和“未排序”的两部分，设已排序m，总长度n</p>
<p>2）从未排序部分选取第一个元素</p>
<p>3）遍历已排序的数组，查找需要插入的位置下标i</p>
<p>4）保护待排序数据，将下标大于i，小于m的所有元素右移一位</p>
<p>5）插入，进入下一轮循环</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(type* arr, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; num; m++)<span class="comment">//外层for循环，用于记录已经排序好的长度m</span></span><br><span class="line">	&#123;</span><br><span class="line">		type tmp = arr[m];</span><br><span class="line">		<span class="type">int</span> i = m - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> ( i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>&amp;&amp;arr[i]&gt;tmp; i--)<span class="comment">//内层for循环，用于遍历已排序的数组</span></span><br><span class="line">		&#123;</span><br><span class="line">			arr[i + <span class="number">1</span>] = arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		arr[i<span class="number">+1</span>] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>算法的性能分析：</p>
<p>时间复杂度：O（n^2）</p>
<p>（平均情况下向长度为m的序列中插入一个数据的平均移动速度是m/2，m从1累加到n-1）</p>
<p>空间复杂度：O（1）</p>
<p>稳定性：稳定</p>
<p>2、交换排序</p>
<p>2.1 快速排序</p>
<p>1）递归调用自身</p>
<p>2）每次将数组以“主元”为界分为较大组和较小组，再对两组分别进行快速排序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">// 用于 std::swap</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> num, <span class="type">int</span> nLower, <span class="type">int</span> nUpper)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> pivot = arr[nLower]; <span class="comment">// 选取第一个元素作为主元进行切割</span></span><br><span class="line">	<span class="type">int</span> nLeft = nLower + <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> nRight = nUpper; <span class="comment">// 确定本次分割的范围</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (nLeft &lt;= nRight &amp;&amp; arr[nLeft] &lt;= pivot) nLeft++; <span class="comment">// 查找左侧第一个大于 pivot 的元素对应的下标</span></span><br><span class="line">		<span class="keyword">while</span> (nRight &gt;= nLeft &amp;&amp; arr[nRight] &gt;= pivot) nRight--; <span class="comment">// 查找右侧第一个小于 pivot 的元素对应的下标</span></span><br><span class="line">		<span class="keyword">if</span> (nLeft &gt; nRight) <span class="keyword">break</span>; <span class="comment">// 循环退出条件</span></span><br><span class="line">		<span class="keyword">if</span> (nLeft &lt; nRight) &#123; <span class="comment">// 如果左标小于右标，交换找到的两个下标对应的数的位置</span></span><br><span class="line">			std::<span class="built_in">swap</span>(arr[nLeft], arr[nRight]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	std::<span class="built_in">swap</span>(arr[nLower], arr[nRight]); <span class="comment">// 将主元放到正确的位置</span></span><br><span class="line">	<span class="keyword">return</span> nRight; <span class="comment">// 返回主元的最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> num, <span class="type">int</span> nLower = <span class="number">0</span>, <span class="type">int</span> nUpper = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (nUpper == <span class="number">-1</span>) nUpper = num - <span class="number">1</span>; <span class="comment">// 缺省参数的情况，nUpper 应该是 num - 1</span></span><br><span class="line">	<span class="keyword">if</span> (nLower &lt; nUpper) &#123;</span><br><span class="line">		<span class="type">int</span> nSplit = <span class="built_in">Partition</span>(arr, num, nLower, nUpper); <span class="comment">// 划分数组</span></span><br><span class="line">		<span class="built_in">QuickSort</span>(arr, num, nLower, nSplit - <span class="number">1</span>); <span class="comment">// 递归排序左侧子数组</span></span><br><span class="line">		<span class="built_in">QuickSort</span>(arr, num, nSplit + <span class="number">1</span>, nUpper); <span class="comment">// 递归排序右侧子数组</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>算法性能分析：</p>
<p>快速排序在n较大时时间复杂度O（nlogn）</p>
<p>在n较小时或主元选择不合理时，时间复杂度为O（n^2）</p>
<p>空间复杂度O（logn）</p>
<p>快速排序是不稳定的</p>
<p>3、选择排序</p>
<p>3.1直接选择排序</p>
<p>1）数组被分为已排序与未排序两组</p>
<p>2）每次遍历未排序组找到最小的元素插入已排序组的最后</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> type&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectSort</span><span class="params">(type* items, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> imin = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; len; j++)<span class="comment">//j从i开始，在i后寻找最小的排到已经排序的前序列后一个</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (items[j] &lt; items[imin]) &#123;</span><br><span class="line">				imin = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (imin != i - <span class="number">1</span>)<span class="comment">//如果找到了，将最小值放置到i-1处</span></span><br><span class="line">		&#123;</span><br><span class="line">			type t = items[i - <span class="number">1</span>];</span><br><span class="line">			items[i - <span class="number">1</span>] = items[imin];</span><br><span class="line">			items[imin] = t;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>数模模拟题的复盘</title>
    <url>/2025/04/06/%E6%95%B0%E6%A8%A1%E6%A8%A1%E6%8B%9F%E9%A2%98%E7%9A%84%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>我们做的问题是：第十六届华中杯<a href="assets/ProblemC.pdf">问题C</a>。这个问题在数学建模竞赛中属于十分简单的问题。我大体的思路就是：</p>
<h3 id="问题一思路："><a href="#问题一思路：" class="headerlink" title="问题一思路："></a>问题一思路：</h3><ol>
<li>归一化波长数据</li>
<li>画出归一化波长-横坐标散点图</li>
<li>得到散点图后，判断适合用何种曲线拟合</li>
<li>采用数据点拟合并画图</li>
<li>选择合适的插值方法，插入数据点后再次拟合</li>
<li>比较两次拟合的结果</li>
</ol>
<h3 id="问题二思路："><a href="#问题二思路：" class="headerlink" title="问题二思路："></a>问题二思路：</h3><ol>
<li>采用迭代方法求函数的离散表达式（可取x区间长0.01等）</li>
<li>增加迭代次数，更改迭代模型（几何近似or微分）</li>
<li>建立曲线函数表达式，分析不同情况下求得函数表达式的精确性</li>
</ol>
<h3 id="问题三思路："><a href="#问题三思路：" class="headerlink" title="问题三思路："></a>问题三思路：</h3><ol>
<li>采用问题二的最佳方案，划分训练集和测试集</li>
<li>利用训练集求出预测函数表达式，再对测试集进行预测</li>
<li>对结果进行误差分析（残差，均方误差），分析误差产生的原因</li>
</ol>
<p>此后，我阅读了某优秀论文，发现其基本思想与我几乎一致。</p>
<p>对于我们初学者想到的这种老套的既有模型，我的总结如下：</p>
<ol>
<li>本次第一题的结果几乎都维持在2.2附近，这说明曲线的曲率近似为定值，应想到原曲线为一个圆。这说明我们对结果的解释不够完善。在做完一件事之后，一定要回头给一个好的解释。</li>
<li>不应该拘泥于题目文件本身，积极寻找相关领域论文，从机理方面做误差分析等实际情况的考虑。</li>
<li>公式过程十分完善，推导很“数学”。虽然使用的都是可以用既有Matlab或Python函数求解的模型，但数模究竟是数模，必须要有完善的数学推理，这部分要把b装足了。</li>
<li>学会变着法儿画图，但是要对每个图片的意义做好阐述。不要认为联系实际，给出合理解释的部分比较low！</li>
<li>有时候，我们只能想到一个大致的思路，但是可以由此触发比较高级的算法，例如想到要插值，可以选用不太老套的插值方法。</li>
<li>不要小看中学数学中学过的初等几何知识。</li>
</ol>
<p>定位为编程辅助建模，意味着二者我都要会！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始数据</span></span><br><span class="line">test_1 = np.array([<span class="number">1529.808</span>, <span class="number">1529.807</span>, <span class="number">1529.813</span>, <span class="number">1529.812</span>, <span class="number">1529.814</span>, <span class="number">1529.809</span>])</span><br><span class="line">test_2 = np.array([<span class="number">1541.095</span>, <span class="number">1541.092</span>, <span class="number">1541.090</span>, <span class="number">1541.093</span>, <span class="number">1541.094</span>, <span class="number">1541.091</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化 (标准化可选)</span></span><br><span class="line">test1 = test_1 / np.mean(test_1)</span><br><span class="line">test2 = test_2 / np.mean(test_2)</span><br><span class="line">dist = <span class="number">0.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试点位置</span></span><br><span class="line">test_points = np.array([<span class="number">1</span>*dist, <span class="number">2</span>*dist, <span class="number">3</span>*dist, <span class="number">4</span>*dist, <span class="number">5</span>*dist, <span class="number">6</span>*dist])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;testpoint&quot;</span>: test_points,</span><br><span class="line">    <span class="string">&quot;test1&quot;</span>: test1,</span><br><span class="line">    <span class="string">&quot;test2&quot;</span>: test2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取数据</span></span><br><span class="line">x = df[<span class="string">&quot;testpoint&quot;</span>].values</span><br><span class="line">y1 = df[<span class="string">&quot;test1&quot;</span>].values</span><br><span class="line">y2 = df[<span class="string">&quot;test2&quot;</span>].values</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三次多项式拟合</span></span><br><span class="line">coef1_cubic = np.polyfit(x, y1, <span class="number">3</span>)</span><br><span class="line">coef2_cubic = np.polyfit(x, y2, <span class="number">3</span>)</span><br><span class="line">poly1_cubic = np.poly1d(coef1_cubic)</span><br><span class="line">poly2_cubic = np.poly1d(coef2_cubic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成更平滑的拟合曲线</span></span><br><span class="line">x_dense = np.linspace(<span class="built_in">min</span>(x), <span class="built_in">max</span>(x), <span class="number">100</span>)</span><br><span class="line">y1_dense = poly1_cubic(x_dense)</span><br><span class="line">y2_dense = poly2_cubic(x_dense)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">plt.scatter(x, y1, color=<span class="string">&quot;blue&quot;</span>, label=<span class="string">&quot;Test1 Data&quot;</span>)</span><br><span class="line">plt.scatter(x, y2, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&quot;Test2 Data&quot;</span>)</span><br><span class="line">plt.plot(x_dense, y1_dense, linestyle=<span class="string">&quot;--&quot;</span>, color=<span class="string">&quot;blue&quot;</span>, alpha=<span class="number">0.7</span>, label=<span class="string">&quot;Cubic Fit 1 (smooth)&quot;</span>)</span><br><span class="line">plt.plot(x_dense, y2_dense, linestyle=<span class="string">&quot;--&quot;</span>, color=<span class="string">&quot;red&quot;</span>, alpha=<span class="number">0.7</span>, label=<span class="string">&quot;Cubic Fit 2 (smooth)&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;Test Point Distance&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Normalized Wavelength&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&quot;Cubic Polynomial Fit (Smoothed)&quot;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出拟合系数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test1 三次拟合系数:&quot;</span>, coef1_cubic)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test2 三次拟合系数:&quot;</span>, coef2_cubic)</span><br><span class="line"></span><br><span class="line">test=[test1,test2]</span><br><span class="line"><span class="comment">#波长数据</span></span><br><span class="line">x_need=[<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.5</span>,<span class="number">0.6</span>,<span class="number">0.7</span>]</span><br><span class="line">y1_predict=poly1_cubic(x_need)</span><br><span class="line">y2_predict=poly2_cubic(x_need)</span><br><span class="line">y1_predict=y1_predict*np.mean(test_1)</span><br><span class="line">y2_predict=y2_predict*np.mean(test_2)</span><br><span class="line"><span class="comment">#曲率数据</span></span><br><span class="line">lamda0=[<span class="number">1529</span>,<span class="number">1540</span>]</span><br><span class="line">c=<span class="number">4200</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lamda2K</span>(<span class="params">y,i</span>):</span><br><span class="line">    <span class="keyword">return</span>(c*(y-lamda0[i]))/lamda0[i-<span class="number">1</span>]</span><br><span class="line">y1_predict=lamda2K(y1_predict,<span class="number">0</span>)</span><br><span class="line">y2_predict=lamda2K(y2_predict,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_K</span>(<span class="params">x,i</span>):</span><br><span class="line">    y_predict=poly1_cubic(x)/np.mean(test[i-<span class="number">1</span>])</span><br><span class="line">    y_predict=lamda2K(y_predict,i-<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y1_predict)</span><br><span class="line"><span class="built_in">print</span>(y2_predict)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上为第一问代码。其输出结果也一并贴在下方。</p>
<p><img data-src="images/mathmodel/Huazhong16C1.png" alt="第一问结果"></p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>简谐振动（更新中）</title>
    <url>/2025/04/05/%E7%AE%80%E8%B0%90%E6%8C%AF%E5%8A%A8%E7%9A%84%E5%90%88%E6%88%90/</url>
    <content><![CDATA[<h2 id="简谐振动的合成"><a href="#简谐振动的合成" class="headerlink" title="简谐振动的合成"></a>简谐振动的合成</h2><h3 id="两个同方向，同频率的简谐振动的合成"><a href="#两个同方向，同频率的简谐振动的合成" class="headerlink" title="两个同方向，同频率的简谐振动的合成"></a>两个<strong>同方向，同频率</strong>的简谐振动的合成</h3><p>由于运动是同方向的，可以将位移的合成表达为代数加法，即</p>
<script type="math/tex; mode=display">
\vec x=\vec x_1+\vec x_2······(1)\\
x=A_1cos(\omega t+\phi_1)+A_2cos(\omega t+\phi_2)=\sqrt{A_1^2+A_2^2+2A_1A_2cos(\phi_1-\phi_2)}cos(\omega t+\phi)······(2)
\\ where \text{ } \phi=arctan(\frac{A_1sin\phi_1+A_2sin\phi_2}{A_1cos\phi_1+A_2cos\phi_2})······(3)</script><p>这个推导是纯数学的，让我们用几何的方法来理解一下，即使用旋转矢量方法来现场计算一下这个值（毕竟背这个公式有点……）</p>
<p><img data-src="images/physics/swirlingvec1.png" alt="旋转矢量的合成"></p>
<p>这样可以直接由几何关系，利用余弦定理求得A，再利用比值法求得</p>
<script type="math/tex; mode=display">
\phi</script><p>下面讨论两种特殊的情况：</p>
<ol>
<li><p>当两振动同相位（或可用诱导公式化为同相位）则：</p>
<script type="math/tex; mode=display">
\text{if}\text{ }\phi_2-\phi_1=2k\pi,k\in N^+\\
\text{then }A=A_1+A_2</script></li>
<li>当两振动反相位（或可用诱导公式化为反相位）则：</li>
</ol>
<script type="math/tex; mode=display">
\text{if}\text{ }\phi_2-\phi_1=(2k+1)\pi,k\in N^+\\
\text{then }A=\lvert{A_1-A_2}\rvert.</script><h3 id="多个同方向、同频率简谐振动的合成：旋转矢量"><a href="#多个同方向、同频率简谐振动的合成：旋转矢量" class="headerlink" title="多个同方向、同频率简谐振动的合成：旋转矢量"></a>多个<strong>同方向、同频率</strong>简谐振动的合成：旋转矢量</h3><p>用《普通物理学》的一道经典例题来讲解一下。</p>
<p><img data-src="images/physics/swirlingvec2.png" alt=" "></p>
<p>由几何关系容易得到，若选取第一个质点（这里假设为质点）运动方向为旋转参考系的x轴正向，则有：</p>
<script type="math/tex; mode=display">
A=2\cdot (Rsin\frac{N\alpha}{2})\\
\phi=\frac{(N-1)\beta}{2}\\
x=Acos(\omega t+\phi)\\=2\cdot (Rsin\frac{N\alpha}{2})\cdot cos[\omega t+\frac{(N-1)\beta}{2}]</script><h3 id="两个同方向不同频率的简谐振动的合成-拍"><a href="#两个同方向不同频率的简谐振动的合成-拍" class="headerlink" title="两个同方向不同频率的简谐振动的合成 拍"></a>两个同方向不同频率的简谐振动的合成 拍</h3><p>两个同方向不同频率的简谐振动的和振动不再是简谐振动，下面先看一下它的一般表示</p>
<script type="math/tex; mode=display">
x_1=A_1cos(\omega_1 t+\phi)\\x_1=A_2cos(\omega_2 t+\phi)\\x=x_1+x_2=A_1cos(\omega_1 t+\phi_1)+A_2cos(\omega_2 t+\phi_2)\\\text{if }A_1=A_2=A,\\x=2Acos(\frac{\omega_2-\omega_1}{2}t)cos(\frac{\omega_2+\omega_1}{2}t+\phi)</script><p>上式是一个相当复杂的运动，这里我们讨论一下：当</p>
<script type="math/tex; mode=display">
\lvert\omega_2-\omega_1\rvert<<\omega_i,i=1,2</script><p>条件下，令</p>
<script type="math/tex; mode=display">
\omega_1\approx\omega_2\approx\omega\\
\text{so that }cos(\frac{\omega_2-\omega_1}{2}t)\approx1\\\frac{\omega_2+\omega_1}{2}\approx \omega\\x\approx 2Acos(\frac{\omega_2-\omega_1}{2}t)cos(\omega t+\phi)</script><p>可以认为和运动近似为一个振幅为</p>
<script type="math/tex; mode=display">
\lvert Acos(\frac{\omega_2-\omega_1}{2}t)\rvert</script><p>的变振幅运动，这个振幅变化的频率称为<strong>拍频</strong>，即</p>
<script type="math/tex; mode=display">
\nu=\lvert \nu_2-\nu_1\rvert</script><p><img data-src="images/physics/clap.png" alt="拍"></p>
<h3 id="谐振分析和频谱"><a href="#谐振分析和频谱" class="headerlink" title="谐振分析和频谱"></a>谐振分析和频谱</h3><p><strong>傅里叶变换</strong>：</p>
<h4 id="傅里叶变换的定义"><a href="#傅里叶变换的定义" class="headerlink" title="傅里叶变换的定义"></a>傅里叶变换的定义</h4><p>对于一个连续时间函数 ，其傅里叶变换  定义为：</p>
<script type="math/tex; mode=display">
F(\omega) = \int_{-\infty}^{\infty} f(t) e^{-i\omega t} \, dt</script><h4 id="傅里叶逆变换"><a href="#傅里叶逆变换" class="headerlink" title="傅里叶逆变换"></a>傅里叶逆变换</h4><p>傅里叶逆变换（Inverse Fourier Transform）将频域信号 转换回时域信号 ：</p>
<script type="math/tex; mode=display">
f(t) = \frac{1}{2\pi} \int_{-\infty}^{\infty} F(\omega) e^{i\omega t} \, d\omega</script><h4 id="离散傅里叶变换"><a href="#离散傅里叶变换" class="headerlink" title="离散傅里叶变换"></a>离散傅里叶变换</h4><p>对于离散时间信号 ( x[n] )，其离散傅里叶变换（Discrete Fourier Transform, DFT） ( X[k] ) 定义为：</p>
<script type="math/tex; mode=display">
X[k] = \sum_{n=0}^{N-1} x[n] e^{-i 2\pi k n / N}</script><p>其中，( N ) 是信号的长度，( k ) 是频率索引。</p>
<h4 id="快速傅里叶变换"><a href="#快速傅里叶变换" class="headerlink" title="快速傅里叶变换"></a>快速傅里叶变换</h4><p>快速傅里叶变换（Fast Fourier Transform, FFT）是一种高效的算法，用于计算离散傅里叶变换。它利用了 DFT 的对称性和周期性，将计算复杂度从 ( O(N^2) ) 降低到 ( O(N · log N) )。</p>
<h4 id="傅里叶变换的示例"><a href="#傅里叶变换的示例" class="headerlink" title="** 傅里叶变换的示例"></a>** 傅里叶变换的示例</h4><p>假设我们有一个简单的时域信号</p>
<script type="math/tex; mode=display">
f(t) = \cos(2\pi t)</script><p>我们来计算它的傅里叶变换：</p>
<script type="math/tex; mode=display">
F(\omega) = \int_{-\infty}^{\infty} \cos(2\pi t) e^{-i\omega t} \, dt\\

\text{利用欧拉公式}
\\
cos(2\pi t) = \frac{e^{i2\pi t} + e^{-i2\pi t}}{2} \\我们有：
\\
F(\omega) = \frac{1}{2} \int_{-\infty}^{\infty} \left( e^{i2\pi t} + e^{-i2\pi t} \right) e^{-i\omega t} \, dt
\\

\\
= \frac{1}{2} \left( \int_{-\infty}^{\infty} e^{i(2\pi - \omega) t} \, dt + \int_{-\infty}^{\infty} e^{-i(2\pi + \omega) t} \, dt \right)
\\

\text{这两个积分都是狄拉克δ函数的定义，因此：}

\\
F(\omega) = \frac{1}{2} \left( 2\pi \delta(\omega - 2\pi) + 2\pi \delta(\omega + 2\pi) \right)
\\

\\
= \pi \left( \delta(\omega - 2\pi) + \delta(\omega + 2\pi) \right)
\\</script><p>可以重点考虑一种特殊的情况：各个分运动都为某个基频整数倍的谐振合成。</p>
<h3 id="两个相互垂直的，同频率简谐振动的合成"><a href="#两个相互垂直的，同频率简谐振动的合成" class="headerlink" title="两个相互垂直的，同频率简谐振动的合成"></a>两个相互垂直的，同频率简谐振动的合成</h3><p>先说结论：轨迹是一个椭圆。下面来尝试证明一下。</p>
<script type="math/tex; mode=display">
x=A_1cos(\omega t+\phi_1)\\y=A_2cos(\omega t+\phi_2)\\消去t,则\\\frac{x^2}{A_1^2}+\frac{y^2}{A_2^2}-\frac{2xy}{A_1A_2}\\=\cos^2{(\omega t+\phi_1)}+\cos^2{(\omega t+\phi_2)}-2\cos(\omega t+\phi_1)\cos(\omega t+\phi_2)\\=[\cos(\omega t+\phi_1)-\cos(\omega t+\phi_2)]^2=\sin^2(\phi_2-\phi_1)</script><p>这是一个椭圆的方程，由此方程可以得到，</p>
<ol>
<li><script type="math/tex; mode=display">
\text{if }\Delta \phi=\phi_2-\phi_1=0\\y=\frac{A_2}{A_1}\cdot x</script><p>这表示此时，振动退化成一条直线上的简谐运动，直线的斜率为y轴振幅与x轴振幅之比，如果以上述直线为x’轴建立运动方程，则：</p>
<script type="math/tex; mode=display">
x'=\sqrt{A_1^2+A_2^2}\cos({\omega t+\phi})</script></li>
<li><script type="math/tex; mode=display">
\text{if }\Delta\phi=\pm \pi\\...</script></li>
<li><script type="math/tex; mode=display">
\text{if }\Delta\phi= \pi/2,\\\frac{x^2}{A_1^2}+\frac{y^2}{A_2^2}=1</script></li>
</ol>
<h3 id="两个相互垂直不同频率的简谐振动合成"><a href="#两个相互垂直不同频率的简谐振动合成" class="headerlink" title="两个相互垂直不同频率的简谐振动合成"></a>两个相互垂直不同频率的简谐振动合成</h3><p><img data-src="images/physics/bisaru.png" alt="李萨如图形"></p>
<h2 id="阻尼振动-受迫振动-共振"><a href="#阻尼振动-受迫振动-共振" class="headerlink" title="阻尼振动 受迫振动 共振"></a>阻尼振动 受迫振动 共振</h2><h3 id="阻尼振动"><a href="#阻尼振动" class="headerlink" title="阻尼振动"></a>阻尼振动</h3><p>这里主要考虑一下阻力与速度成正比的情况，并且忽略所谓的辐射损失，推导阻尼振动的运动方程。设弹簧振子在线性阻力下运动，则：</p>
<script type="math/tex; mode=display">
m\frac{d^2x}{dt^2}=-kx-\gamma\frac{dx}{dt}\\\text{这是一个二阶常系数线齐次微分方程，我们讨论其解的结构：}\\\text{令}\omega^2_0=k/m,2\beta=\gamma/m,\\x''+2\beta x'+\omega_0^2x=0,\\
\lambda^2+2\beta\lambda+\omega_0^2=0,
\lambda_{1,2}=-\beta\pm\sqrt{\beta^2-\omega_0^2}\\1)\beta<\omega,x=A_0e^{-\beta t}cos(\sqrt{\omega_0^2-\beta^2 }\cdot t+\phi)\\2)\beta>\omega_0,x=Ae^{-(\beta+\sqrt{\beta^2-\omega_0^2})t}+Be^{-(\beta-\sqrt{\beta^2-\omega^2_0})t}\\3)\beta=\omega_0,x=e^{-\beta t}(A+Bt)</script>]]></content>
  </entry>
  <entry>
    <title>二叉树及其基本操作算法</title>
    <url>/2025/04/04/%E6%A0%91/</url>
    <content><![CDATA[<h3 id="二叉树的特性："><a href="#二叉树的特性：" class="headerlink" title="二叉树的特性："></a>二叉树的特性：</h3><ol>
<li>与一般树的根本区别：二叉树的每一个节点都恰好有两颗子树（其中一个或两个可以为空），而树的每一个元素可以有任意数量的子树。</li>
<li>二叉树中，每个元素的子树是有序的，也就是说，有左子树和右子树之分。</li>
<li>二叉树可以为空的。</li>
<li><p>一颗有</p>
<script type="math/tex; mode=display">
n>0</script><p>个元素的二叉树有</p>
<script type="math/tex; mode=display">
n-1</script><p>条边，最大高度为<script type="math/tex">n</script>,最小高度为</p>
<script type="math/tex; mode=display">
\left\lceil\log_2(n-1)\right\rceil</script></li>
<li><p>一颗二叉树高度为h&gt;=0，它至少有h个元素，最多有</p>
<script type="math/tex; mode=display">
2^h-1</script><p>个元素（称为满二叉树）</p>
</li>
<li><p>完全二叉树是指对高度为h的满二叉树，从第一层到最后一层，在每层中从左至右顺序编号，删除k个编号为</p>
<script type="math/tex; mode=display">
2^h-i(1≤i≤k<2^h)</script><p>的元素得到的二叉树。然而，我们还有更为容易理解的一种定义：完全二叉树：深度为k的具有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号为1~n的结点一 一对应时，称之为完全二叉树。<br><img data-src="images/tree/complete_tree.png" alt="二叉树"></p>
</li>
<li><p>完全二叉树的特性：设完全二叉树的一元素其编号为i，1≤i≤n.则有</p>
<ol>
<li><p>如果i=1，则该元素为二叉树的根；如果i&gt;1,则其父节点的编号为</p>
<script type="math/tex; mode=display">
i/2</script></li>
<li><p>有n个元素的完全二叉树，其高度为</p>
<script type="math/tex; mode=display">
\left\lceil\log_2{(n+1)}\right\rceil</script></li>
<li>如果2i&gt;n，则该元素无左孩，否则其左孩编号为2i</li>
<li><p>如果2i+1&gt;n，则该元素无右孩，否则其右孩编号为2i+1.<br>下面证明一下这个性质。<br>当i=1，显然该元素为二叉树的根；当i&gt;1时，考虑对应元素不在最下层，位于树的第</p>
<script type="math/tex; mode=display">
\left\lfloor\log_2{i}\right\rfloor</script><p>级上，其父节点位于</p>
<script type="math/tex; mode=display">
\left\lfloor\log_2{i}\right\rfloor-1</script><p>级上，且</p>
<script type="math/tex; mode=display">
\frac{i-2^{\left\lfloor\log_2{i}\right\rfloor}}{2}=i_{parent}=\left\lfloor\frac{i}{2}\right\rfloor</script><p>若2i&gt;n，即</p>
<script type="math/tex; mode=display">
i>\frac{n}{2}</script><p>设高度为h,只需证：h-1层的最后一个元素的编号</p>
</li>
</ol>
<script type="math/tex; mode=display">
i_{previous} \geq n/2</script><p>考虑最极端的情况，也就是满二叉树（我们当然可以知道满二叉树是一种特殊的二叉树），那么</p>
<script type="math/tex; mode=display">
n=2^h-1</script><p>，而h-1层的最后一个元素的编号为</p>
<script type="math/tex; mode=display">
i_{previous}=2^h{h-1}-1</script><p>（注意这一点是与假设满二叉树无关的）<br>显然满足上述条件。那么对于由满二叉树退化而来（注意这里的表述）的完全二叉树，我们可以知道，如果对应的满二叉树的元素数量为</p>
<script type="math/tex; mode=display">
n_{max}>n</script><p>，则：</p>
<script type="math/tex; mode=display">
i_{previous} \geq \frac{n_{max}}{2}>\frac{n}{2}</script><p>故得证。同理可以完全对称地证明剩余的一个结论。</p>
</li>
</ol>
<h3 id="二叉树的描述："><a href="#二叉树的描述：" class="headerlink" title="二叉树的描述："></a>二叉树的描述：</h3><ol>
<li><p>数组描述。<br>二叉树的数组表示利用了性质7，把二叉树看作是缺少了部分元素的完全二叉树。将二叉树相对于完全二叉树（实际上，相对于满二叉树）缺少的部分也参与编号，对编号后的树建立数组，原有二叉树的元素按照其编号存储在数组的相应位置。一个有n个元素的二叉树最多需要</p>
<script type="math/tex; mode=display">
2^n</script><p>个空间来存储（包括了数组的零位置）。所以这是一种很浪费空间的描述方式。值得注意的是，在这种描述种我们用到了类似哈希表的思想，用空间换得了时间。比如，这样存储的二叉树，其查找的时间复杂度为O(1).</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100struct TreeNode&#123;</span></span><br><span class="line">   ElemType value;<span class="comment">//结点中的数据元素</span></span><br><span class="line">   <span class="type">bool</span> isEmpty;<span class="comment">//结点是否为空&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">   TreeNode t[MaxSize];</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">      t[i].isEmpty = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>链表描述。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//binary search tree:left&lt;=right</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bstNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line">bstNode* left;</span><br><span class="line">bstNode* right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Creat a node</span></span><br><span class="line"><span class="function">bstNode* <span class="title">getNewNode</span><span class="params">(<span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstNode* newNode = <span class="keyword">new</span> <span class="built_in">bstNode</span>();</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;left = newNode-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binaryTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line">T element;</span><br><span class="line">binaryTreeNode&lt;T&gt; *lChild,*rChild;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="二叉树的常用操作"><a href="#二叉树的常用操作" class="headerlink" title="二叉树的常用操作"></a>二叉树的常用操作</h3><ol>
<li>二叉树的遍历</li>
<li>求二叉树的高度</li>
<li>复制二叉树</li>
<li>插入节点</li>
<li>删除节点</li>
<li>查找元素</li>
<li>求元素最值（int）</li>
<li>判断是不是二叉搜索树<br>下面是我写的主要操作的算法实现。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Insertion</span></span><br><span class="line"><span class="function">bstNode* <span class="title">Insert</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		root = <span class="built_in">getNewNode</span>(data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		root-&gt;left = <span class="built_in">Insert</span>(root-&gt;left, data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &gt; root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		root-&gt;right = <span class="built_in">Insert</span>(root-&gt;right, data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Search</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Search</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;data == data)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt; root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Search</span>(root-&gt;left, data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &gt; root-&gt;data)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Search</span>(root-&gt;right, data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Find Min and Max</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMin</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Error:empty tree&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>  <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bstNode* current = root;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (current-&gt;left)</span><br><span class="line">	&#123;</span><br><span class="line">		current = current-&gt;left;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> current-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findMax</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Error:empty tree&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	bstNode* current = root;</span><br><span class="line">	<span class="keyword">while</span> (current-&gt;right)</span><br><span class="line">	&#123;</span><br><span class="line">		current = current-&gt;right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> current-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FindMax using recursion</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">recursMax</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bstNode* current = root;</span><br><span class="line">	<span class="keyword">if</span> (current-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> current-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">recursMax</span>(current-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Height of tree </span></span><br><span class="line"><span class="comment">//is the number of edges in longest path </span></span><br><span class="line"><span class="comment">//from root to leaf node</span></span><br><span class="line"><span class="comment">//Get Height(recursion)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Height</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span> + (<span class="built_in">Height</span>(root-&gt;left) &gt;= <span class="built_in">Height</span>(root-&gt;right) ? <span class="built_in">Height</span>(root-&gt;left) : <span class="built_in">Height</span>(root-&gt;right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Traversal</span></span><br><span class="line"><span class="comment">//process of visiting each node in the tree exactly once in some order</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Breadth-first</span></span><br><span class="line"><span class="comment">//Using queue:(LIFO)</span></span><br><span class="line"><span class="comment">//Inserting all the children of current node into a queue </span></span><br><span class="line"><span class="comment">//Visiting the data of the current node</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	queue&lt;bstNode*&gt;Q;</span><br><span class="line">	Q.<span class="built_in">push</span>(root);</span><br><span class="line">	<span class="comment">//while the queue is not empty</span></span><br><span class="line">	<span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		bstNode* current = Q.<span class="built_in">front</span>();</span><br><span class="line">		cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;left)Q.<span class="built_in">push</span>(current-&gt;left);</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;right)Q.<span class="built_in">push</span>(current-&gt;right);</span><br><span class="line">		Q.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Time:O(n)</span></span><br><span class="line"><span class="comment">//Space:Avg-&gt;O(n)</span></span><br><span class="line"><span class="comment">//Depth_first</span></span><br><span class="line"><span class="comment">//1.root-&gt;left-&gt;right(Preorder)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Preorder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; root-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;left)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Preorder</span>(root-&gt;left);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;right)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Preorder</span>(root-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.left-&gt;root-&gt;right(Inorder)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Inorder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>; <span class="comment">// 如果当前节点为空，直接返回</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">Inorder</span>(root-&gt;left);         <span class="comment">// 递归访问左子树</span></span><br><span class="line">	cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">// 访问当前节点</span></span><br><span class="line">	<span class="built_in">Inorder</span>(root-&gt;right);        <span class="comment">// 递归访问右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.left-&gt;right-&gt;root(Postorder) </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Postorder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)<span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">Postorder</span>(root-&gt;left);</span><br><span class="line">	<span class="built_in">Postorder</span>(root-&gt;right);</span><br><span class="line">	cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//using recursion</span></span><br><span class="line"><span class="comment">//bool isSubtreeLesser(bstNode* root,int val)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (root == nullptr)return true;</span></span><br><span class="line"><span class="comment">//	if (root-&gt;data &lt;= val</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeLesser(root-&gt;left, val)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeLesser(root-&gt;right, val))return true;</span></span><br><span class="line"><span class="comment">//	else return false;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool isSubtreeGreater(bstNode* root, int val)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (root == nullptr)return true;</span></span><br><span class="line"><span class="comment">//	if (root-&gt;data &gt; val</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeGreater(root-&gt;left, val)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeGreater(root-&gt;right, val))return true;</span></span><br><span class="line"><span class="comment">//	else return false;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool isBst(bstNode *root)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	if (root == nullptr)return true;</span></span><br><span class="line"><span class="comment">//	if (isSubtreeLesser(root-&gt;left, root-&gt;data)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isSubtreeGreater(root-&gt;right, root-&gt;data)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isBst(root-&gt;left)</span></span><br><span class="line"><span class="comment">//		&amp;&amp; isBst(root-&gt;right)</span></span><br><span class="line"><span class="comment">//		)return true;</span></span><br><span class="line"><span class="comment">//	else return false;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//better edition</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isBst</span><span class="params">(bstNode* root, <span class="type">int</span> minVal= INT_MIN, <span class="type">int</span> maxVal=INT_MAX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!root)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">isBst</span>(root-&gt;left, minVal, root-&gt;data)</span><br><span class="line">		&amp;&amp; <span class="built_in">isBst</span>(root-&gt;right, root-&gt;data, maxVal)</span><br><span class="line">		&amp;&amp; root-&gt;data&lt;maxVal &amp;&amp; root-&gt;data&gt;minVal)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Delete a node from bst</span></span><br><span class="line"><span class="function">bstNode* <span class="title">Delete</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!root)<span class="keyword">return</span> root;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt; root-&gt;data)root-&gt;left = <span class="built_in">Delete</span>(root-&gt;left, data);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &gt; root-&gt;data)root-&gt;right = <span class="built_in">Delete</span>(root-&gt;right, data);</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//found</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//no child</span></span><br><span class="line">		<span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span> &amp;&amp; root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> root;</span><br><span class="line">			root = <span class="literal">nullptr</span>;</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//one child</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;left == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			bstNode* tmp = root;</span><br><span class="line">			root = root-&gt;right;</span><br><span class="line">			<span class="keyword">delete</span> tmp;</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;right == <span class="literal">nullptr</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			bstNode* tmp = root;</span><br><span class="line">			root = root-&gt;left;</span><br><span class="line">			<span class="keyword">delete</span> tmp;</span><br><span class="line">			<span class="keyword">return</span> root;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//two children</span></span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			bstNode* tmp = <span class="built_in">FindMin</span>(root-&gt;right);</span><br><span class="line">			root-&gt;data = tmp-&gt;data;</span><br><span class="line">			root-&gt;right = <span class="built_in">Delete</span>(root-&gt;right, tmp-&gt;data);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bstNode* <span class="title">FindMin</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Error:empty tree&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	bstNode* current = root;</span><br><span class="line">	<span class="keyword">while</span> (current-&gt;right)</span><br><span class="line">	&#123;</span><br><span class="line">		current = current-&gt;right;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在进行二叉树遍历的时候，有这样四种遍历方式：</p>
<ol>
<li>前序遍历（PreOrder）:root-&gt;left-&gt;right</li>
<li>中序遍历（InOrder）:left-&gt;root-&gt;right</li>
<li>后序遍历（PostOrder）:left-&gt;right-&gt;root</li>
<li>层次遍历（LevelOrder）</li>
</ol>
<p>对于前三种，他们的递归形式很好理解，以前序遍历为例，其算法可以表述为：</p>
<ol>
<li>访问当前节点。</li>
<li>如果左孩不为空，前序遍历左子树。</li>
<li>如果右孩不为空，前序遍历右子树。</li>
</ol>
<p>我们来看看如何把它写成迭代的形式。</p>
<p>这里以前序遍历为例。迭代形式的算法可以表述为：</p>
<ol>
<li>建立一个栈空间Q</li>
<li>当我们遍历到当前节点current时，读取这个节点的数据</li>
<li>如果当前节点的左孩不为空，就把当前节点压入Q，将当前节点移到左孩处</li>
<li>如果当前节点的左孩为空，将Q的栈顶弹出，当前节点回到其父节点。<br>a. 此时，如果当前节点有右孩，就把当前节点移到右孩，重复2~4.<br>b. 如果此时当前节点没有右孩，则重复4.</li>
</ol>
<p>基于这种迭代方法，我们可以<strong>显示地</strong>将递归形式中通过函数调用的栈空间用Q栈表示出来了。以下为具体的实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> &#123;&#125;;  <span class="comment">// 如果根节点为空，直接返回空结果</span></span><br><span class="line">        stack&lt;TreeNode*&gt; S;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">        TreeNode* rt = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rt || !S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (rt) &#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(rt-&gt;val);  <span class="comment">// 访问当前节点</span></span><br><span class="line">                S.<span class="built_in">push</span>(rt);            <span class="comment">// 将当前节点压入栈</span></span><br><span class="line">                rt = rt-&gt;left;         <span class="comment">// 转向左子树</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!S.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                rt = S.<span class="built_in">top</span>();  <span class="comment">// 弹出栈顶节点</span></span><br><span class="line">                S.<span class="built_in">pop</span>();</span><br><span class="line">                rt = rt-&gt;right;  <span class="comment">// 转向右子树</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>值得注意的是，此时虽然我们用了递归方法，但这种方法的时间复杂度并不一定低于迭代方法。</p>
<p>二叉树的层序遍历则是使用了队列的数据结构，其算法过程描述如下：</p>
<ol>
<li>建立一个队列Q。</li>
<li>将根节点入Q列。</li>
<li>如果Q列不为空，则从队头弹出一个节点，读取其数据并将其孩子节点（如果存在）入列。</li>
<li>重复3，直到Q列空，返回。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(bstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">queue&lt;bstNode*&gt;Q;</span><br><span class="line">Q.<span class="built_in">push</span>(root);</span><br><span class="line"><span class="comment">//while the queue is not empty</span></span><br><span class="line"><span class="keyword">while</span> (!Q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">bstNode* current = Q.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; current-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;left)Q.<span class="built_in">push</span>(current-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (current-&gt;right)Q.<span class="built_in">push</span>(current-&gt;right);</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="应用举例：信号放大器问题"><a href="#应用举例：信号放大器问题" class="headerlink" title="应用举例：信号放大器问题"></a>应用举例：信号放大器问题</h3>]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>编码器与译码器</title>
    <url>/2025/04/04/%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%EF%BC%9A%E7%BC%96%E7%A0%81%E5%99%A8%E4%B8%8E%E8%AF%91%E7%A0%81%E5%99%A8/</url>
    <content><![CDATA[<h1 id="3-1-编码器：普通编码器与优先编码器"><a href="#3-1-编码器：普通编码器与优先编码器" class="headerlink" title="3.1 编码器：普通编码器与优先编码器"></a>3.1 编码器：普通编码器与优先编码器</h1><p>3.1.1 编码器的分类</p>
<p>普通编码器：任何时刻只允许输入一个有效信号，不允许同时出现两个或两个以上的有效信号，因而其输入是一组有约束的变量</p>
<p>优先编码器：用于优先中断系统和键盘编码</p>
<p>3.1.2优先编码器举例： 8线-3线优先编码器（74LS48）</p>
<p><img data-src="images/digitalcircuit/image.png" alt="image.png"></p>
<p><img data-src="images/digitalcircuit/image1.png" alt="image.png"></p>
<p>输入输出均为低电平有效，优先级7~0。从功能表可以看出：</p>
<ol>
<li>E1是使能端，E1处于低电平时系统才工作。</li>
<li>CS （chip select）和E0输出情况：</li>
</ol>
<p>CS：片选信号，当片选信号为0时，说明有输入信号，该芯片片选有效；</p>
<p>E1：Enable信号</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>CS</th>
<th>E0</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>使能端高电平，系统不工作</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>系统工作但无输入信号</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>系统工作且有输入信号</td>
</tr>
</tbody>
</table>
</div>
<p>下面是74LS148优先编码器的Verilog实现：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> _74hc148(</span><br><span class="line">    <span class="keyword">input</span>           S,</span><br><span class="line">    <span class="keyword">input</span>   [<span class="number">7</span>:<span class="number">0</span>]   A,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>]   Y,</span><br><span class="line">    <span class="keyword">output</span>          Yex,</span><br><span class="line">    <span class="keyword">output</span>          Ys</span><br><span class="line">);</span><br><span class="line"><span class="keyword">always</span>@(*)<span class="keyword">begin</span><span class="comment">//always块内部只能访问reg变量</span></span><br><span class="line">   <span class="keyword">if</span>(!S)<span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">casex</span>(A)</span><br><span class="line">            <span class="number">8&#x27;b0xxxxxxx</span> : Y = <span class="number">0</span>;</span><br><span class="line">            <span class="number">8&#x27;b10xxxxxx</span> : Y = <span class="number">1</span>;</span><br><span class="line">            <span class="number">8&#x27;b110xxxxx</span> : Y = <span class="number">2</span>;</span><br><span class="line">            <span class="number">8&#x27;b1110xxxx</span> : Y = <span class="number">3</span>;</span><br><span class="line">            <span class="number">8&#x27;b11110xxx</span> : Y = <span class="number">4</span>;</span><br><span class="line">            <span class="number">8&#x27;b111110xx</span> : Y = <span class="number">5</span>;</span><br><span class="line">            <span class="number">8&#x27;b1111110x</span> : Y = <span class="number">6</span>;</span><br><span class="line">            <span class="number">8&#x27;b11111110</span> : Y = <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">default</span>:      Y = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">      Y=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> &#123;Ys,Yex&#125;=S ? <span class="number">2&#x27;b11</span> : (&amp;A ? <span class="number">2&#x27;b01</span> : <span class="number">2&#x27;b10</span>);<span class="comment">//&amp;A 对A进行按位与，即诘问A是否各位都为1</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>这个实现具有以下特点：</p>
<ul>
<li>完全支持优先级编码，I7具有最高优先级，I0具有最低优先级</li>
<li>使用active-low逻辑，符合74LS148的规格</li>
<li>包含使能控制（E1）和状态输出（E0, CS）</li>
<li>测试文件包含了多种测试场景，包括使能控制、单输入和多输入情况</li>
</ul>
<p>级联问题：（注意到后三位的循环）</p>
<p><img data-src="images/digitalcircuit/image2.png" alt="image.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">//级联:</span></span><br><span class="line"><span class="keyword">module</span> _16_4encoder(</span><br><span class="line">    <span class="keyword">input</span> S,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] IN,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] Y,</span><br><span class="line">    <span class="keyword">output</span> Ys,</span><br><span class="line">    <span class="keyword">output</span> Yex</span><br><span class="line">);</span><br><span class="line">    <span class="comment">// 中间信号</span></span><br><span class="line">    <span class="keyword">wire</span> Ys1, Yex1, Ys2, Yex2;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] Y1, Y2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化两个74HC148</span></span><br><span class="line">    _74hc148 U1(</span><br><span class="line">        <span class="variable">.A</span>(IN[<span class="number">15</span>:<span class="number">8</span>]),  <span class="comment">// 高8位输入</span></span><br><span class="line">        <span class="variable">.S</span>(S),</span><br><span class="line">        <span class="variable">.Y</span>(Y1),</span><br><span class="line">        <span class="variable">.Ys</span>(Ys1),</span><br><span class="line">        <span class="variable">.Yex</span>(Yex1)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _74hc148 U2(</span><br><span class="line">        <span class="variable">.A</span>(IN[<span class="number">7</span>:<span class="number">0</span>]),   <span class="comment">// 低8位输入</span></span><br><span class="line">        <span class="variable">.S</span>(Ys1),       <span class="comment">// 如果高8位无效，则处理低8位</span></span><br><span class="line">        <span class="variable">.Y</span>(Y2),</span><br><span class="line">        <span class="variable">.Ys</span>(Ys2),</span><br><span class="line">        <span class="variable">.Yex</span>(Yex2)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并输出</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!Ys1) <span class="keyword">begin</span>  <span class="comment">// 高8位有效</span></span><br><span class="line">            Y[<span class="number">2</span>:<span class="number">0</span>] = Y1;</span><br><span class="line">            Y[<span class="number">3</span>] = <span class="number">1&#x27;b1</span>;  <span class="comment">// 高8位优先</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            Y[<span class="number">2</span>:<span class="number">0</span>] = Y2;</span><br><span class="line">            Y[<span class="number">3</span>] = <span class="number">1&#x27;b0</span>;  <span class="comment">// 低8位</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有效输出和扩展输出</span></span><br><span class="line">    <span class="keyword">assign</span> Ys = ~(Ys1 | Ys2);  <span class="comment">// 如果高8位或低8位有效，则Ys为低电平</span></span><br><span class="line">    <span class="keyword">assign</span> Yex = Ys1 &amp; Ys2;    <span class="comment">// 如果高8位和低8位都无效，则Yex为低电平</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h1 id="3-2译码器"><a href="#3-2译码器" class="headerlink" title="3.2译码器"></a>3.2译码器</h1><p>3.2.1 中规模集成电路译码器的基本结构：</p>
<p><img data-src="images/digitalcircuit/image3.png" alt="image.png"></p>
<p> 例如，3-8译码器74LS38：</p>
<ol>
<li>基本介绍</li>
</ol>
<p>74LS138是一种常用的3-8线译码器，其主要功能是将3位二进制输入编码转换为8个互斥的输出。具体功能如下：</p>
<ol>
<li>输入编码：接收3位二进制输入信号（A0、A1、A2），可以表示8种不同的状态（000~111）</li>
<li>译码输出：根据输入的二进制组合，在8个输出端（Y0~Y7）中选择一个输出有效信号</li>
<li>使能控制：通过3个使能端（S1、S2、S3）控制芯片的工作状态，S1&amp;（S2’+S3’)时工作</li>
</ol>
<p>工作原理：</p>
<ul>
<li>当使能端满足工作条件时，芯片根据输入端A0、A1、A2的二进制组合，在相应的输出端产生低电平有效信号</li>
<li>在任意时刻，8个输出端中只有一个输出端为低电平（有效），其余输出端均为高电平（无效）</li>
</ul>
<p>主要应用：</p>
<ul>
<li>地址译码：在计算机系统中用于<strong>存储器地址译码</strong></li>
<li>数据选择：用于<strong>多路数据选择电路</strong></li>
<li>信号分配：将一路信号分配到多个设备</li>
</ul>
<ol>
<li>引脚排布：74LS138有6个输入端，7个输出端。</li>
</ol>
<p><img data-src="https://i-blog.csdnimg.cn/blog_migrate/8736ec3fad8152625e694533580a733f.png" alt=""></p>
<p><strong>特点：</strong></p>
<ol>
<li>输入端高电平有效，输出端低电平有效；</li>
<li>S1，S2，S3为三个使能控制端，且当S1=S2=S3=0时，该译码器才有效状态信号输出。</li>
</ol>
<p><strong>真值表如图所示：</strong></p>
<p><img data-src="https://i-blog.csdnimg.cn/blog_migrate/897c624084caa17c468c1ac72769cda8.png" alt=""></p>
<p>各输出状态由Ai输入决定。</p>
<p><img data-src="https://i-blog.csdnimg.cn/blog_migrate/3f5c7b8a30829fe046a43d4543533a89.png" alt=""></p>
<p>Yi=mi（正好对应最小项）</p>
<p>Verilog实现</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> _74hc138(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] A,       <span class="comment">// 3位输入地址</span></span><br><span class="line">    <span class="keyword">input</span> S1, S2, S3,    <span class="comment">// 使能信号</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] Y   <span class="comment">// 8位输出</span></span><br><span class="line">);</span><br><span class="line">    <span class="comment">// 使能条件判断</span></span><br><span class="line">    <span class="keyword">wire</span> enable;</span><br><span class="line">    <span class="keyword">assign</span> enable = S3 &amp; ~S2 &amp; ~S1;  <span class="comment">// 使能条件：S3=1, S2=0, S1=0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (enable) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">case</span> (A)</span><br><span class="line">                <span class="number">3&#x27;b000</span>: Y = <span class="number">8&#x27;b00000001</span>;</span><br><span class="line">                <span class="number">3&#x27;b001</span>: Y = <span class="number">8&#x27;b00000010</span>;</span><br><span class="line">                <span class="number">3&#x27;b010</span>: Y = <span class="number">8&#x27;b00000100</span>;</span><br><span class="line">                <span class="number">3&#x27;b011</span>: Y = <span class="number">8&#x27;b00001000</span>;</span><br><span class="line">                <span class="number">3&#x27;b100</span>: Y = <span class="number">8&#x27;b00010000</span>;</span><br><span class="line">                <span class="number">3&#x27;b101</span>: Y = <span class="number">8&#x27;b00100000</span>;</span><br><span class="line">                <span class="number">3&#x27;b110</span>: Y = <span class="number">8&#x27;b01000000</span>;</span><br><span class="line">                <span class="number">3&#x27;b111</span>: Y = <span class="number">8&#x27;b10000000</span>;</span><br><span class="line">                <span class="keyword">default</span>: Y = <span class="number">8&#x27;b11111111</span>;  <span class="comment">// 默认输出全高电平</span></span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            Y = <span class="number">8&#x27;b11111111</span>;  <span class="comment">// 未使能时，所有输出为高电平</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>级联问题：</p>
<p><img data-src="images/digitalcircuit/image4.png" alt="image.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> _16to4_decoder(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] A,       <span class="comment">// 4位输入地址</span></span><br><span class="line">    <span class="keyword">input</span> S1, S2, S3,    <span class="comment">// 使能信号</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">15</span>:<span class="number">0</span>] Y  <span class="comment">// 16位输出</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间信号</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] A1;       <span class="comment">// 第一个74HC138的地址输入</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] A2;       <span class="comment">// 第二个74HC138的地址输入</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>] enable;   <span class="comment">// 两个74HC138的使能信号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配地址和使能信号</span></span><br><span class="line">    <span class="keyword">assign</span> A1 = A[<span class="number">3</span>:<span class="number">1</span>];   <span class="comment">// 高3位地址给第一个74HC138</span></span><br><span class="line">    <span class="keyword">assign</span> A2 = A[<span class="number">2</span>:<span class="number">0</span>];   <span class="comment">// 低3位地址给第二个74HC138</span></span><br><span class="line">    <span class="keyword">assign</span> enable = &#123;S3, S2, S1&#125;; <span class="comment">// 使能信号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个74HC138，用于选择第二个74HC138的使能信号</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] Y1;       <span class="comment">// 第一个74HC138的输出</span></span><br><span class="line">    _74hc138 decoder1(</span><br><span class="line">        <span class="variable">.A</span>(A1),</span><br><span class="line">        <span class="variable">.S1</span>(enable[<span class="number">0</span>]),</span><br><span class="line">        <span class="variable">.S2</span>(enable[<span class="number">1</span>]),</span><br><span class="line">        <span class="variable">.S3</span>(enable[<span class="number">2</span>]),</span><br><span class="line">        <span class="variable">.Y</span>(Y1)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个74HC138，用于生成最终的4位输出</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] Y2;       <span class="comment">// 第二个74HC138的输出</span></span><br><span class="line">    _74hc138 decoder2(</span><br><span class="line">        <span class="variable">.A</span>(A2),</span><br><span class="line">        <span class="variable">.S1</span>(Y1[<span class="number">0</span>]),</span><br><span class="line">        <span class="variable">.S2</span>(Y1[<span class="number">1</span>]),</span><br><span class="line">        <span class="variable">.S3</span>(Y1[<span class="number">2</span>]),</span><br><span class="line">        <span class="variable">.Y</span>(Y2)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将两个74HC138的输出组合成16位输出</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        Y = &#123;Y2, Y2&#125;;    <span class="comment">// 将第二个74HC138的输出复制到16位输出中</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<p>74hc42：BCD码转10进制编码器</p>
<p><img data-src="images/digitalcircuit/image5.png" alt="image.png"></p>
<p><img data-src="images/digitalcircuit/image6.png" alt="image.png"></p>
<p>74ls47：七段字形译码器<br>下图所示的是一个七段字形数码管:</p>
<p><img data-src="images/digitalcircuit/image7.png" alt="image.png"></p>
<p>7个条形的发光二极管排列成这种样式，每一段通过一个引脚控制。7段数码管有两种，共阳极数码管和共阴极数码管，其中，共阳极数码管的7个发光二极管的阳极连在一起，7个阴极是独立的；而共阴极数码管的7个发光二极管的阴极连在一起，7个阳极是独立的。<br>当共阳极数码管的某一阴极接低电平时，相应的二极管发光，故共阳极数码管需要输出低电平有效的译码器驱动，而共阴极数码管需要输出高电平有效的译码器驱动。</p>
<p>如下图所示是一个输出低电平有效的七段字形译码器74LS47的集成芯片引脚图和它的真值表：</p>
<p><img data-src="images/digitalcircuit/image8.png" alt="image.png"></p>
<p>在译码的同时，还有一些引脚有如下的功能：</p>
<p>（1）试灯输入 L T </p>
<p>试灯输入顾名思义是为了检测每一段数码管是否正常工作而设置的，当输入为0时，无论其余的输入是什么值，译码器都是输出低电平，可以保证每一个发光二极管变亮。</p>
<p>（2）灭灯输入 B I </p>
<p>灭灯输入也是顾名思义，是为了让每一段数码管灭灯而设置的。当输入为0时，不论其他的输入是什么状态，译码器均输入高电平，使得所有的数码管熄灭</p>
<p>（3）灭零输入 B R I </p>
<p>灭零输入功能是为了让不需要显示的0熄灭而设置的，例如：当我们在显示0088.8800时，实际上只需显示88.88即可，把其他位置上的0熄灭即可。</p>
<p>（4）灭零输出 R B O<br>RBO输出是否熄灭0的信号</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> _74ls47(</span><br><span class="line">		<span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] A,       <span class="comment">// 4位输入地址</span></span><br><span class="line">    <span class="keyword">input</span> LT,            <span class="comment">// 试灯输入</span></span><br><span class="line">    <span class="keyword">input</span> BI,            <span class="comment">// 灭灯输入</span></span><br><span class="line">    <span class="keyword">input</span> BRI,           <span class="comment">// 灭零输入</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">6</span>:<span class="number">0</span>] Y,  <span class="comment">// 7段数码管输出</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> RBO       <span class="comment">// 灭零输出</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义7段数码管的段码</span></span><br><span class="line">    <span class="keyword">function</span> [<span class="number">6</span>:<span class="number">0</span>] get_segment(<span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] value);</span><br><span class="line">        <span class="keyword">case</span> (value)</span><br><span class="line">            <span class="number">4&#x27;d0</span>: get_segment = <span class="number">7&#x27;b1000000</span>;  <span class="comment">// 0</span></span><br><span class="line">            <span class="number">4&#x27;d1</span>: get_segment = <span class="number">7&#x27;b1111001</span>;  <span class="comment">// 1</span></span><br><span class="line">            <span class="number">4&#x27;d2</span>: get_segment = <span class="number">7&#x27;b0100100</span>;  <span class="comment">// 2</span></span><br><span class="line">            <span class="number">4&#x27;d3</span>: get_segment = <span class="number">7&#x27;b0110000</span>;  <span class="comment">// 3</span></span><br><span class="line">            <span class="number">4&#x27;d4</span>: get_segment = <span class="number">7&#x27;b0011001</span>;  <span class="comment">// 4</span></span><br><span class="line">            <span class="number">4&#x27;d5</span>: get_segment = <span class="number">7&#x27;b0010010</span>;  <span class="comment">// 5</span></span><br><span class="line">            <span class="number">4&#x27;d6</span>: get_segment = <span class="number">7&#x27;b0000010</span>;  <span class="comment">// 6</span></span><br><span class="line">            <span class="number">4&#x27;d7</span>: get_segment = <span class="number">7&#x27;b1111000</span>;  <span class="comment">// 7</span></span><br><span class="line">            <span class="number">4&#x27;d8</span>: get_segment = <span class="number">7&#x27;b0000000</span>;  <span class="comment">// 8</span></span><br><span class="line">            <span class="number">4&#x27;d9</span>: get_segment = <span class="number">7&#x27;b0010000</span>;  <span class="comment">// 9</span></span><br><span class="line">            <span class="keyword">default</span>: get_segment = <span class="number">7&#x27;b1111111</span>;  <span class="comment">// 默认全灭</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!BI) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// 灭灯输入为0，所有输出为高电平</span></span><br><span class="line">            Y = <span class="number">7&#x27;b1111111</span>;</span><br><span class="line">            RBO = <span class="number">1&#x27;b1</span>;  <span class="comment">// 灭零输出为高电平</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (!LT) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// 试灯输入为0，所有输出为低电平</span></span><br><span class="line">            Y = <span class="number">7&#x27;b0000000</span>;</span><br><span class="line">            RBO = <span class="number">1&#x27;b0</span>;  <span class="comment">// 灭零输出为低电平</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">// 正常译码</span></span><br><span class="line">            Y = get_segment(A);</span><br><span class="line">            <span class="keyword">if</span> (!BRI &amp;&amp; A == <span class="number">4&#x27;d0</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">// 灭零输入为0且输入值为0，熄灭0</span></span><br><span class="line">                Y = <span class="number">7&#x27;b1111111</span>;</span><br><span class="line">                RBO = <span class="number">1&#x27;b1</span>;  <span class="comment">// 灭零输出为高电平</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                RBO = <span class="number">1&#x27;b0</span>;  <span class="comment">// 灭零输出为低电平</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数字逻辑设计</category>
      </categories>
      <tags>
        <tag>组合逻辑</tag>
      </tags>
  </entry>
</search>
